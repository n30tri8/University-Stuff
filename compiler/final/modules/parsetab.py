
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftOR_ELSE_KWleftAND_THEN_KWleftEQNEleftLTGTLEGEleft+-left*/nonassocIFTHENnonassocIFELSEnonassocnormal_assignnonassocfor_assignAND_THEN_KW ASSIGNMENT BEGIN_KW BOOL_KW CASE_KW DOWNTO_KW DO_KW ELSE_KW END_KW EQ FALSE_KW FOR_KW FUNCTION_KW GE GT ID IF_KW INT_KW LE LT NE NUMBER_INT NUMBER_REAL OR_ELSE_KW PROCEDURE_KW PROGRAM_KW REAL_KW RETURN_KW THEN_KW TO_KW TRUE_KW WHILE_KWprogram : programInitiator PROGRAM_KW ID ';' declist block ';'\n        program : programInitiator PROGRAM_KW ID ';' block ';'programInitiator : emptydeclist : dec\n\n        declist : declist dec\n        dec : vardec\n        dec : procdec\n        dec : funcdec\n        type : INT_KW\n        type : REAL_KW\n        type : BOOL_KW\n        iddec : ID\n        iddec : ID ASSIGNMENT exp\n        idlist : iddec\n        idlist : idlist ',' iddec\n        vardec : type idlist ';'procdec : PROCEDURE_KW ID '(' paramdecs_final ')' block ';'procdec : PROCEDURE_KW ID '(' paramdecs_final ')' declist block ';'funcdec : funInitiator scopeInitiator block ';'funcdec : funInitiator scopeInitiator declist block ';'\n        funInitiator : FUNCTION_KW ID '(' quadder nexter paramdecs_final ')' ':' type\n        \n        paramdecs_final : paramdecs\n        paramdecs : paramdec\n        paramdecs : paramdecs ';' paramdec\n        paramdec : type paramlistparamlist : ID\n        paramlist : paramlist ',' ID\n        block : BEGIN_KW scopeInitiator stmtlist END_KW\n        scopeInitiator : empty\n        block : stmt\n        stmtlist : stmt\n        stmtlist : stmtlist ';' stmt\n        lvalue : IDassignment_stmt : lvalue ASSIGNMENT exp\n        \n        stmt : assignment_stmt %prec normal_assign\n        \n        stmt : selectionIfInitiator quadder block nexter quadder\n        stmt : selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder %prec IFELSE\n         selectionIfInitiator : IF_KW exp THEN_KW %prec IFTHEN\n         stmt : iterationInitiator quadder block nexter\n        iterationInitiator : WHILE_KW quadder exp DO_KW\n        \n        stmt : for_init_up quadder block nexter\n        \n        for_init_up : forInitiator TO_KW quadder exp DO_KW\n        \n        stmt : for_init_down quadder block nexter\n        \n        for_init_down : forInitiator DOWNTO_KW quadder exp DO_KW\n        \n        forInitiator : FOR_KW assignment_stmt %prec for_assign\n        stmt : CASE_KW exp nexter caseelement END_KW quadder\n        caseelement : NUMBER_INT ':' quadder block ';' nexter\n        caseelement : caseelement NUMBER_INT ':' quadder block ';' nexter\n        stmt : RETURN_KW exp\n        stmt : exp\n        andInitiator : exp AND_THEN_KW\n        exp : andInitiator quadder exp\n        orInitiator : exp OR_ELSE_KW\n        exp : orInitiator quadder exp\n        exp : exp '+' quadder exp\n        exp : exp '-' quadder exp\n        exp : exp '*' quadder exp\n        exp : exp '/' quadder exp\n        exp : '(' exp ')'\n        exp : NUMBER_INT\n        exp : NUMBER_REAL\n        exp : TRUE_KW\n        exp : FALSE_KW\n        exp : lvalue\n        exp : ID '(' explist ')'\n        exp : exp GT quadder exp\n        exp : exp GE quadder exp\n        exp : exp NE quadder exp\n        exp : exp EQ quadder exp\n        exp : exp LT quadder exp\n        exp : exp LE quadder exp\n        explist : exp\n        explist : explist ',' exp\n        quadder : empty\n        nexter : empty\n        empty :\n        "
    
_lr_action_items = {'PROGRAM_KW':([0,2,3,],[-76,4,-3,]),'$end':([1,46,88,],[0,-2,-1,]),'ID':([4,6,8,10,11,13,14,15,17,18,19,20,21,23,24,25,26,27,29,30,32,33,38,39,40,41,42,43,45,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,74,75,77,78,79,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,113,115,117,118,123,125,147,148,150,157,160,161,165,166,167,169,171,172,174,176,179,181,188,192,],[5,7,7,-4,-76,-6,-7,-8,-76,-76,-76,-76,7,7,71,72,7,-76,7,-76,-76,-76,-9,-10,-11,82,85,7,-5,7,-29,7,-74,7,7,7,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,7,7,7,-76,-76,7,7,7,7,7,7,7,7,7,7,7,7,-16,71,7,7,-38,7,7,7,7,164,-19,-40,-76,-76,7,-20,-42,-44,7,-76,7,7,183,7,-17,-18,-21,]),';':([5,7,9,12,16,22,28,34,35,36,37,44,50,55,68,69,70,71,89,90,91,92,93,94,96,111,112,114,119,120,122,124,126,127,128,129,132,133,134,135,136,137,138,139,140,141,142,143,145,146,149,155,156,158,163,164,170,173,175,178,180,182,183,185,186,],[6,-33,46,-30,-35,-50,-64,-60,-61,-62,-63,88,-74,-64,-49,107,-14,-12,125,-31,-76,-76,-76,-76,-75,-59,148,-34,-52,-54,-65,-28,-76,-39,-41,-43,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,-15,-13,162,-23,165,-32,-36,-76,-25,-26,-46,181,-24,-76,187,188,-27,-37,190,]),'BEGIN_KW':([6,8,10,13,14,15,17,18,19,20,27,38,39,40,45,48,49,50,51,52,53,74,107,113,115,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[11,11,-4,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,-29,11,-74,11,11,11,11,-16,11,-38,-19,-40,-76,-76,11,-20,-42,-44,11,-76,11,11,11,-17,-18,-21,]),'CASE_KW':([6,8,10,11,13,14,15,17,18,19,20,27,38,39,40,45,47,48,49,50,51,52,53,74,107,113,115,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[21,21,-4,-76,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,21,-29,21,-74,21,21,21,21,-16,21,-38,21,-19,-40,-76,-76,21,-20,-42,-44,21,-76,21,21,21,-17,-18,-21,]),'RETURN_KW':([6,8,10,11,13,14,15,17,18,19,20,27,38,39,40,45,47,48,49,50,51,52,53,74,107,113,115,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[23,23,-4,-76,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,23,-29,23,-74,23,23,23,23,-16,23,-38,23,-19,-40,-76,-76,23,-20,-42,-44,23,-76,23,23,23,-17,-18,-21,]),'PROCEDURE_KW':([6,8,10,13,14,15,27,38,39,40,45,48,74,107,113,148,161,165,174,181,188,192,],[25,25,-4,-6,-7,-8,-76,-9,-10,-11,-5,-29,25,-16,25,-19,25,-20,25,-17,-18,-21,]),'IF_KW':([6,8,10,11,13,14,15,17,18,19,20,27,38,39,40,45,47,48,49,50,51,52,53,74,107,113,115,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[29,29,-4,-76,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,29,-29,29,-74,29,29,29,29,-16,29,-38,29,-19,-40,-76,-76,29,-20,-42,-44,29,-76,29,29,29,-17,-18,-21,]),'WHILE_KW':([6,8,10,11,13,14,15,17,18,19,20,27,38,39,40,45,47,48,49,50,51,52,53,74,107,113,115,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[30,30,-4,-76,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,30,-29,30,-74,30,30,30,30,-16,30,-38,30,-19,-40,-76,-76,30,-20,-42,-44,30,-76,30,30,30,-17,-18,-21,]),'(':([6,7,8,10,11,13,14,15,17,18,19,20,21,23,26,27,29,30,32,33,38,39,40,43,45,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,72,74,75,77,78,79,80,81,82,97,98,99,100,101,102,103,104,105,106,107,109,113,115,117,118,123,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[26,43,26,-4,-76,-6,-7,-8,-76,-76,-76,-76,26,26,26,-76,26,-76,-76,-76,-9,-10,-11,26,-5,26,-29,26,-74,26,26,26,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,110,26,26,26,-76,-76,26,26,121,26,26,26,26,26,26,26,26,26,26,-16,26,26,-38,26,26,26,26,-19,-40,-76,-76,26,-20,-42,-44,26,-76,26,26,26,-17,-18,-21,]),'NUMBER_INT':([6,7,8,10,11,13,14,15,17,18,19,20,21,23,26,27,29,30,32,33,34,35,36,37,38,39,40,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,74,75,77,78,79,80,81,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,118,119,120,122,123,125,130,132,133,134,135,136,137,138,139,140,141,148,150,157,160,161,165,166,167,169,171,172,174,179,181,187,188,190,191,192,193,],[34,-33,34,-4,-76,-6,-7,-8,-76,-76,-76,-76,34,34,34,-76,34,-76,-76,-76,-60,-61,-62,-63,-9,-10,-11,34,-5,34,-29,34,-74,34,34,34,-76,-64,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,34,34,34,-76,-76,34,34,131,-75,34,34,34,34,34,34,34,34,34,34,-16,34,-59,34,-38,34,34,-52,-54,-65,34,34,159,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,-19,-40,-76,-76,34,-20,-42,-44,34,-76,34,34,34,-17,-76,-18,-76,-47,-21,-48,]),'NUMBER_REAL':([6,8,10,11,13,14,15,17,18,19,20,21,23,26,27,29,30,32,33,38,39,40,43,45,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,74,75,77,78,79,80,81,97,98,99,100,101,102,103,104,105,106,107,109,113,115,117,118,123,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[35,35,-4,-76,-6,-7,-8,-76,-76,-76,-76,35,35,35,-76,35,-76,-76,-76,-9,-10,-11,35,-5,35,-29,35,-74,35,35,35,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,35,35,35,-76,-76,35,35,35,35,35,35,35,35,35,35,35,35,-16,35,35,-38,35,35,35,35,-19,-40,-76,-76,35,-20,-42,-44,35,-76,35,35,35,-17,-18,-21,]),'TRUE_KW':([6,8,10,11,13,14,15,17,18,19,20,21,23,26,27,29,30,32,33,38,39,40,43,45,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,74,75,77,78,79,80,81,97,98,99,100,101,102,103,104,105,106,107,109,113,115,117,118,123,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[36,36,-4,-76,-6,-7,-8,-76,-76,-76,-76,36,36,36,-76,36,-76,-76,-76,-9,-10,-11,36,-5,36,-29,36,-74,36,36,36,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,36,36,36,-76,-76,36,36,36,36,36,36,36,36,36,36,36,36,-16,36,36,-38,36,36,36,36,-19,-40,-76,-76,36,-20,-42,-44,36,-76,36,36,36,-17,-18,-21,]),'FALSE_KW':([6,8,10,11,13,14,15,17,18,19,20,21,23,26,27,29,30,32,33,38,39,40,43,45,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,74,75,77,78,79,80,81,97,98,99,100,101,102,103,104,105,106,107,109,113,115,117,118,123,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[37,37,-4,-76,-6,-7,-8,-76,-76,-76,-76,37,37,37,-76,37,-76,-76,-76,-9,-10,-11,37,-5,37,-29,37,-74,37,37,37,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,-51,-53,37,37,37,-76,-76,37,37,37,37,37,37,37,37,37,37,37,37,-16,37,37,-38,37,37,37,37,-19,-40,-76,-76,37,-20,-42,-44,37,-76,37,37,37,-17,-18,-21,]),'INT_KW':([6,8,10,13,14,15,27,38,39,40,45,48,50,74,96,107,110,113,121,148,153,161,162,165,168,174,181,188,189,192,],[38,38,-4,-6,-7,-8,-76,-9,-10,-11,-5,-29,-74,38,-75,-16,38,38,-76,-19,-76,38,38,-20,38,38,-17,-18,38,-21,]),'REAL_KW':([6,8,10,13,14,15,27,38,39,40,45,48,50,74,96,107,110,113,121,148,153,161,162,165,168,174,181,188,189,192,],[39,39,-4,-6,-7,-8,-76,-9,-10,-11,-5,-29,-74,39,-75,-16,39,39,-76,-19,-76,39,39,-20,39,39,-17,-18,39,-21,]),'BOOL_KW':([6,8,10,13,14,15,27,38,39,40,45,48,50,74,96,107,110,113,121,148,153,161,162,165,168,174,181,188,189,192,],[40,40,-4,-6,-7,-8,-76,-9,-10,-11,-5,-29,-74,40,-75,-16,40,40,-76,-19,-76,40,40,-20,40,40,-17,-18,40,-21,]),'FUNCTION_KW':([6,8,10,13,14,15,27,38,39,40,45,48,74,107,113,148,161,165,174,181,188,192,],[41,41,-4,-6,-7,-8,-76,-9,-10,-11,-5,-29,41,-16,41,-19,41,-20,41,-17,-18,-21,]),'FOR_KW':([6,8,10,11,13,14,15,17,18,19,20,27,38,39,40,45,47,48,49,50,51,52,53,74,107,113,115,125,148,150,157,160,161,165,166,167,169,171,172,174,179,181,188,192,],[42,42,-4,-76,-6,-7,-8,-76,-76,-76,-76,-76,-9,-10,-11,-5,42,-29,42,-74,42,42,42,42,-16,42,-38,42,-19,-40,-76,-76,42,-20,-42,-44,42,-76,42,42,42,-17,-18,-21,]),'ASSIGNMENT':([7,28,71,84,85,],[-33,75,109,75,-33,]),'+':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,56,-64,-60,-61,-62,-63,56,-64,56,56,56,56,-59,56,56,56,56,-65,-55,-56,-57,-58,56,56,56,56,56,56,56,56,56,56,]),'-':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,57,-64,-60,-61,-62,-63,57,-64,57,57,57,57,-59,57,57,57,57,-65,-55,-56,-57,-58,57,57,57,57,57,57,57,57,57,57,]),'*':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,58,-64,-60,-61,-62,-63,58,-64,58,58,58,58,-59,58,58,58,58,-65,58,58,-57,-58,58,58,58,58,58,58,58,58,58,58,]),'/':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,59,-64,-60,-61,-62,-63,59,-64,59,59,59,59,-59,59,59,59,59,-65,59,59,-57,-58,59,59,59,59,59,59,59,59,59,59,]),'GT':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,60,-64,-60,-61,-62,-63,60,-64,60,60,60,60,-59,60,60,60,60,-65,-55,-56,-57,-58,-66,-67,60,60,-70,-71,60,60,60,60,]),'GE':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,61,-64,-60,-61,-62,-63,61,-64,61,61,61,61,-59,61,61,61,61,-65,-55,-56,-57,-58,-66,-67,61,61,-70,-71,61,61,61,61,]),'NE':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,62,-64,-60,-61,-62,-63,62,-64,62,62,62,62,-59,62,62,62,62,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,62,62,62,62,]),'EQ':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,63,-64,-60,-61,-62,-63,63,-64,63,63,63,63,-59,63,63,63,63,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,63,63,63,63,]),'LT':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,64,-64,-60,-61,-62,-63,64,-64,64,64,64,64,-59,64,64,64,64,-65,-55,-56,-57,-58,-66,-67,64,64,-70,-71,64,64,64,64,]),'LE':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,65,-64,-60,-61,-62,-63,65,-64,65,65,65,65,-59,65,65,65,65,-65,-55,-56,-57,-58,-66,-67,65,65,-70,-71,65,65,65,65,]),'AND_THEN_KW':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,66,-64,-60,-61,-62,-63,66,-64,66,66,66,66,-59,66,66,66,66,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,66,66,66,66,]),'OR_ELSE_KW':([7,22,28,34,35,36,37,54,55,68,73,76,87,111,114,116,119,120,122,132,133,134,135,136,137,138,139,140,141,143,151,152,154,],[-33,67,-64,-60,-61,-62,-63,67,-64,67,67,67,67,-59,67,67,67,67,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,67,67,67,67,]),'END_KW':([7,12,16,22,28,34,35,36,37,50,55,68,89,90,91,92,93,94,96,111,114,119,120,122,124,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,155,156,158,170,178,185,187,190,191,193,],[-33,-30,-35,-50,-64,-60,-61,-62,-63,-74,-64,-49,124,-31,-76,-76,-76,-76,-75,-59,-34,-52,-54,-65,-28,-76,-39,-41,-43,158,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,-32,-36,-76,-46,-76,-37,-76,-76,-47,-48,]),'ELSE_KW':([7,12,16,22,28,34,35,36,37,50,55,68,91,92,93,94,96,111,114,119,120,122,124,126,127,128,129,132,133,134,135,136,137,138,139,140,141,156,158,170,178,185,],[-33,-30,-35,-50,-64,-60,-61,-62,-63,-74,-64,-49,-76,-76,-76,-76,-75,-59,-34,-52,-54,-65,-28,157,-39,-41,-43,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,-36,-76,-46,-76,-37,]),')':([7,34,35,36,37,55,73,86,87,111,119,120,122,132,133,134,135,136,137,138,139,140,141,144,145,146,154,163,164,175,177,183,],[-33,-60,-61,-62,-63,-64,111,122,-72,-59,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,161,-22,-23,-73,-25,-26,-24,184,-27,]),'THEN_KW':([7,34,35,36,37,55,76,111,119,120,122,132,133,134,135,136,137,138,139,140,141,],[-33,-60,-61,-62,-63,-64,115,-59,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,]),',':([7,34,35,36,37,55,69,70,71,86,87,111,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,154,163,164,183,],[-33,-60,-61,-62,-63,-64,108,-14,-12,123,-72,-59,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,-15,-13,-73,176,-26,-27,]),'TO_KW':([7,31,34,35,36,37,55,83,111,114,119,120,122,132,133,134,135,136,137,138,139,140,141,],[-33,78,-60,-61,-62,-63,-64,-45,-59,-34,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,]),'DOWNTO_KW':([7,31,34,35,36,37,55,83,111,114,119,120,122,132,133,134,135,136,137,138,139,140,141,],[-33,79,-60,-61,-62,-63,-64,-45,-59,-34,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,]),'DO_KW':([7,34,35,36,37,55,111,116,119,120,122,132,133,134,135,136,137,138,139,140,141,151,152,],[-33,-60,-61,-62,-63,-64,-59,150,-52,-54,-65,-55,-56,-57,-58,-66,-67,-68,-69,-70,-71,166,167,]),':':([131,159,184,],[160,171,189,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programInitiator':([0,],[2,]),'empty':([0,11,17,18,19,20,27,30,32,33,54,56,57,58,59,60,61,62,63,64,65,78,79,91,92,93,94,121,126,153,157,158,160,171,178,187,190,],[3,48,50,50,50,50,48,50,50,50,96,50,50,50,50,50,50,50,50,50,50,50,50,96,96,96,96,50,50,96,50,50,50,50,50,96,96,]),'declist':([6,74,161,],[8,113,174,]),'block':([6,8,49,51,52,53,74,113,161,169,172,174,179,],[9,44,91,92,93,94,112,149,173,178,180,182,186,]),'dec':([6,8,74,113,161,174,],[10,45,10,45,10,45,]),'stmt':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[12,12,90,12,12,12,12,12,12,155,12,12,12,12,12,]),'vardec':([6,8,74,113,161,174,],[13,13,13,13,13,13,]),'procdec':([6,8,74,113,161,174,],[14,14,14,14,14,14,]),'funcdec':([6,8,74,113,161,174,],[15,15,15,15,15,15,]),'assignment_stmt':([6,8,42,47,49,51,52,53,74,113,125,161,169,172,174,179,],[16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'selectionIfInitiator':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'iterationInitiator':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'for_init_up':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'for_init_down':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'exp':([6,8,21,23,26,29,43,47,49,51,52,53,74,75,77,80,81,97,98,99,100,101,102,103,104,105,106,109,113,117,118,123,125,161,169,172,174,179,],[22,22,54,68,73,76,87,22,22,22,22,22,22,114,116,119,120,132,133,134,135,136,137,138,139,140,141,143,22,151,152,154,22,22,22,22,22,22,]),'type':([6,8,74,110,113,161,162,168,174,189,],[24,24,24,147,24,24,147,147,24,192,]),'funInitiator':([6,8,74,113,161,174,],[27,27,27,27,27,27,]),'lvalue':([6,8,21,23,26,29,42,43,47,49,51,52,53,74,75,77,80,81,97,98,99,100,101,102,103,104,105,106,109,113,117,118,123,125,161,169,172,174,179,],[28,28,55,55,55,55,84,55,28,28,28,28,28,28,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,28,55,55,55,28,28,28,28,28,28,]),'forInitiator':([6,8,47,49,51,52,53,74,113,125,161,169,172,174,179,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'andInitiator':([6,8,21,23,26,29,43,47,49,51,52,53,74,75,77,80,81,97,98,99,100,101,102,103,104,105,106,109,113,117,118,123,125,161,169,172,174,179,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'orInitiator':([6,8,21,23,26,29,43,47,49,51,52,53,74,75,77,80,81,97,98,99,100,101,102,103,104,105,106,109,113,117,118,123,125,161,169,172,174,179,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'scopeInitiator':([11,27,],[47,74,]),'quadder':([17,18,19,20,30,32,33,56,57,58,59,60,61,62,63,64,65,78,79,121,126,157,158,160,171,178,],[49,51,52,53,77,80,81,97,98,99,100,101,102,103,104,105,106,117,118,153,156,169,170,172,179,185,]),'idlist':([24,],[69,]),'iddec':([24,108,],[70,142,]),'explist':([43,],[86,]),'stmtlist':([47,],[89,]),'nexter':([54,91,92,93,94,153,187,190,],[95,126,127,128,129,168,191,193,]),'caseelement':([95,],[130,]),'paramdecs_final':([110,168,],[144,177,]),'paramdecs':([110,168,],[145,145,]),'paramdec':([110,162,168,],[146,175,146,]),'paramlist':([147,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> programInitiator PROGRAM_KW ID ; declist block ;','program',7,'p_program_1','parser.py',43),
  ('program -> programInitiator PROGRAM_KW ID ; block ;','program',6,'p_program_2','parser.py',57),
  ('programInitiator -> empty','programInitiator',1,'p_program_initiator','parser.py',71),
  ('declist -> dec','declist',1,'p_declist_1','parser.py',78),
  ('declist -> declist dec','declist',2,'p_declist_2','parser.py',84),
  ('dec -> vardec','dec',1,'p_dec_1','parser.py',89),
  ('dec -> procdec','dec',1,'p_dec_2','parser.py',94),
  ('dec -> funcdec','dec',1,'p_dec_3','parser.py',99),
  ('type -> INT_KW','type',1,'p_type_1','parser.py',104),
  ('type -> REAL_KW','type',1,'p_type_2','parser.py',110),
  ('type -> BOOL_KW','type',1,'p_type_3','parser.py',116),
  ('iddec -> ID','iddec',1,'p_iddec_1','parser.py',122),
  ('iddec -> ID ASSIGNMENT exp','iddec',3,'p_iddec_2','parser.py',128),
  ('idlist -> iddec','idlist',1,'p_idlist_1','parser.py',143),
  ('idlist -> idlist , iddec','idlist',3,'p_idlist_2','parser.py',149),
  ('vardec -> type idlist ;','vardec',3,'p_vardec','parser.py',155),
  ('procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ;','procdec',7,'p_procdec_1','parser.py',166),
  ('procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ;','procdec',8,'p_procdec_2','parser.py',170),
  ('funcdec -> funInitiator scopeInitiator block ;','funcdec',4,'p_funcdec_1','parser.py',174),
  ('funcdec -> funInitiator scopeInitiator declist block ;','funcdec',5,'p_funcdec_2','parser.py',191),
  ('funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type','funInitiator',9,'p_funInitiator','parser.py',209),
  ('paramdecs_final -> paramdecs','paramdecs_final',1,'p_paramdecs_final','parser.py',222),
  ('paramdecs -> paramdec','paramdecs',1,'p_paramdecs_1','parser.py',235),
  ('paramdecs -> paramdecs ; paramdec','paramdecs',3,'p_paramdecs_2','parser.py',241),
  ('paramdec -> type paramlist','paramdec',2,'p_paramdec','parser.py',247),
  ('paramlist -> ID','paramlist',1,'p_paramlist_1','parser.py',259),
  ('paramlist -> paramlist , ID','paramlist',3,'p_paramlist_2','parser.py',265),
  ('block -> BEGIN_KW scopeInitiator stmtlist END_KW','block',4,'p_block_1','parser.py',271),
  ('scopeInitiator -> empty','scopeInitiator',1,'p_scope_initiator','parser.py',281),
  ('block -> stmt','block',1,'p_block_2','parser.py',287),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist_1','parser.py',293),
  ('stmtlist -> stmtlist ; stmt','stmtlist',3,'p_stmtlist_2','parser.py',299),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',308),
  ('assignment_stmt -> lvalue ASSIGNMENT exp','assignment_stmt',3,'p_assign_stmt','parser.py',315),
  ('stmt -> assignment_stmt','stmt',1,'p_assignment_stmt_1','parser.py',337),
  ('stmt -> selectionIfInitiator quadder block nexter quadder','stmt',5,'p_selection_stmt_2','parser.py',344),
  ('stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder','stmt',8,'p_selection_stmt_3','parser.py',357),
  ('selectionIfInitiator -> IF_KW exp THEN_KW','selectionIfInitiator',3,'p_selection_if_initiator','parser.py',368),
  ('stmt -> iterationInitiator quadder block nexter','stmt',4,'p_iteration_stmt_4','parser.py',387),
  ('iterationInitiator -> WHILE_KW quadder exp DO_KW','iterationInitiator',4,'p_iteration_initiator','parser.py',398),
  ('stmt -> for_init_up quadder block nexter','stmt',4,'p_stmt_5','parser.py',418),
  ('for_init_up -> forInitiator TO_KW quadder exp DO_KW','for_init_up',5,'p_for_init_up','parser.py',432),
  ('stmt -> for_init_down quadder block nexter','stmt',4,'p_stmt_6','parser.py',454),
  ('for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW','for_init_down',5,'p_for_init_down','parser.py',467),
  ('forInitiator -> FOR_KW assignment_stmt','forInitiator',2,'p_for_initiator','parser.py',488),
  ('stmt -> CASE_KW exp nexter caseelement END_KW quadder','stmt',6,'p_stmt_7','parser.py',493),
  ('caseelement -> NUMBER_INT : quadder block ; nexter','caseelement',6,'p_caseelement_1','parser.py',517),
  ('caseelement -> caseelement NUMBER_INT : quadder block ; nexter','caseelement',7,'p_caseelement_2','parser.py',530),
  ('stmt -> RETURN_KW exp','stmt',2,'p_stmt_8','parser.py',546),
  ('stmt -> exp','stmt',1,'p_stmt_9','parser.py',584),
  ('andInitiator -> exp AND_THEN_KW','andInitiator',2,'p_and_initiator','parser.py',590),
  ('exp -> andInitiator quadder exp','exp',3,'p_exp_1','parser.py',608),
  ('orInitiator -> exp OR_ELSE_KW','orInitiator',2,'p_or_initiator','parser.py',630),
  ('exp -> orInitiator quadder exp','exp',3,'p_exp_2','parser.py',648),
  ('exp -> exp + quadder exp','exp',4,'p_exp_3','parser.py',669),
  ('exp -> exp - quadder exp','exp',4,'p_exp_4','parser.py',731),
  ('exp -> exp * quadder exp','exp',4,'p_exp_5','parser.py',792),
  ('exp -> exp / quadder exp','exp',4,'p_exp_6','parser.py',854),
  ('exp -> ( exp )','exp',3,'p_exp_7','parser.py',916),
  ('exp -> NUMBER_INT','exp',1,'p_exp_9','parser.py',922),
  ('exp -> NUMBER_REAL','exp',1,'p_exp_10','parser.py',930),
  ('exp -> TRUE_KW','exp',1,'p_exp_11','parser.py',938),
  ('exp -> FALSE_KW','exp',1,'p_exp_12','parser.py',949),
  ('exp -> lvalue','exp',1,'p_exp_13','parser.py',959),
  ('exp -> ID ( explist )','exp',4,'p_exp_14','parser.py',965),
  ('exp -> exp GT quadder exp','exp',4,'p_exp_15','parser.py',1022),
  ('exp -> exp GE quadder exp','exp',4,'p_exp_16','parser.py',1059),
  ('exp -> exp NE quadder exp','exp',4,'p_exp_17','parser.py',1096),
  ('exp -> exp EQ quadder exp','exp',4,'p_exp_18','parser.py',1133),
  ('exp -> exp LT quadder exp','exp',4,'p_exp_19','parser.py',1170),
  ('exp -> exp LE quadder exp','exp',4,'p_exp_20','parser.py',1207),
  ('explist -> exp','explist',1,'p_explist_1','parser.py',1245),
  ('explist -> explist , exp','explist',3,'p_explist_2','parser.py',1260),
  ('quadder -> empty','quadder',1,'p_quadder','parser.py',1281),
  ('nexter -> empty','nexter',1,'p_nexter','parser.py',1289),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1297),
]
