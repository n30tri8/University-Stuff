Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> programInitiator PROGRAM_KW ID ; declist block ;
Rule 2     program -> programInitiator PROGRAM_KW ID ; block ;
Rule 3     programInitiator -> empty
Rule 4     declist -> dec
Rule 5     declist -> declist dec
Rule 6     dec -> vardec
Rule 7     dec -> procdec
Rule 8     dec -> funcdec
Rule 9     type -> INT_KW
Rule 10    type -> REAL_KW
Rule 11    type -> BOOL_KW
Rule 12    iddec -> ID
Rule 13    iddec -> ID ASSIGNMENT exp
Rule 14    idlist -> iddec
Rule 15    idlist -> idlist , iddec
Rule 16    vardec -> type idlist ;
Rule 17    procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ;
Rule 18    procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ;
Rule 19    funcdec -> funInitiator scopeInitiator block ;
Rule 20    funcdec -> funInitiator scopeInitiator declist block ;
Rule 21    funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type
Rule 22    paramdecs_final -> paramdecs
Rule 23    paramdecs -> paramdec
Rule 24    paramdecs -> paramdecs ; paramdec
Rule 25    paramdec -> type paramlist
Rule 26    paramlist -> ID
Rule 27    paramlist -> paramlist , ID
Rule 28    block -> BEGIN_KW scopeInitiator stmtlist END_KW
Rule 29    scopeInitiator -> empty
Rule 30    block -> stmt
Rule 31    stmtlist -> stmt
Rule 32    stmtlist -> stmtlist ; stmt
Rule 33    lvalue -> ID
Rule 34    assignment_stmt -> lvalue ASSIGNMENT exp
Rule 35    stmt -> assignment_stmt
Rule 36    stmt -> selectionIfInitiator quadder block nexter quadder
Rule 37    stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
Rule 38    selectionIfInitiator -> IF_KW exp THEN_KW
Rule 39    stmt -> iterationInitiator quadder block nexter
Rule 40    iterationInitiator -> WHILE_KW quadder exp DO_KW
Rule 41    stmt -> for_init_up quadder block nexter
Rule 42    for_init_up -> forInitiator TO_KW quadder exp DO_KW
Rule 43    stmt -> for_init_down quadder block nexter
Rule 44    for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW
Rule 45    forInitiator -> FOR_KW assignment_stmt
Rule 46    stmt -> CASE_KW exp nexter caseelement END_KW quadder
Rule 47    caseelement -> NUMBER_INT : quadder block ; nexter
Rule 48    caseelement -> caseelement NUMBER_INT : quadder block ; nexter
Rule 49    stmt -> RETURN_KW exp
Rule 50    stmt -> exp
Rule 51    andInitiator -> exp AND_THEN_KW
Rule 52    exp -> andInitiator quadder exp
Rule 53    orInitiator -> exp OR_ELSE_KW
Rule 54    exp -> orInitiator quadder exp
Rule 55    exp -> exp + quadder exp
Rule 56    exp -> exp - quadder exp
Rule 57    exp -> exp * quadder exp
Rule 58    exp -> exp / quadder exp
Rule 59    exp -> ( exp )
Rule 60    exp -> NUMBER_INT
Rule 61    exp -> NUMBER_REAL
Rule 62    exp -> TRUE_KW
Rule 63    exp -> FALSE_KW
Rule 64    exp -> lvalue
Rule 65    exp -> ID ( explist )
Rule 66    exp -> exp GT quadder exp
Rule 67    exp -> exp GE quadder exp
Rule 68    exp -> exp NE quadder exp
Rule 69    exp -> exp EQ quadder exp
Rule 70    exp -> exp LT quadder exp
Rule 71    exp -> exp LE quadder exp
Rule 72    explist -> exp
Rule 73    explist -> explist , exp
Rule 74    quadder -> empty
Rule 75    nexter -> empty
Rule 76    empty -> <empty>

Terminals, with rules where they appear

(                    : 17 18 21 59 65
)                    : 17 18 21 59 65
*                    : 57
+                    : 55
,                    : 15 27 73
-                    : 56
/                    : 58
:                    : 21 47 48
;                    : 1 1 2 2 16 17 18 19 20 24 32 47 48
AND_THEN_KW          : 51
ASSIGNMENT           : 13 34
BEGIN_KW             : 28
BOOL_KW              : 11
CASE_KW              : 46
DOWNTO_KW            : 44
DO_KW                : 40 42 44
ELSE_KW              : 37
END_KW               : 28 46
EQ                   : 69
FALSE_KW             : 63
FOR_KW               : 45
FUNCTION_KW          : 21
GE                   : 67
GT                   : 66
ID                   : 1 2 12 13 17 18 21 26 27 33 65
IF_KW                : 38
INT_KW               : 9
LE                   : 71
LT                   : 70
NE                   : 68
NUMBER_INT           : 47 48 60
NUMBER_REAL          : 61
OR_ELSE_KW           : 53
PROCEDURE_KW         : 17 18
PROGRAM_KW           : 1 2
REAL_KW              : 10
RETURN_KW            : 49
THEN_KW              : 38
TO_KW                : 42
TRUE_KW              : 62
WHILE_KW             : 40
error                : 

Nonterminals, with rules where they appear

andInitiator         : 52
assignment_stmt      : 35 45
block                : 1 2 17 18 19 20 36 37 37 39 41 43 47 48
caseelement          : 46 48
dec                  : 4 5
declist              : 1 5 18 20
empty                : 3 29 74 75
exp                  : 13 34 38 40 42 44 46 49 50 51 52 53 54 55 55 56 56 57 57 58 58 59 66 66 67 67 68 68 69 69 70 70 71 71 72 73
explist              : 65 73
forInitiator         : 42 44
for_init_down        : 43
for_init_up          : 41
funInitiator         : 19 20
funcdec              : 8
iddec                : 14 15
idlist               : 15 16
iterationInitiator   : 39
lvalue               : 34 64
nexter               : 21 36 37 39 41 43 46 47 48
orInitiator          : 54
paramdec             : 23 24
paramdecs            : 22 24
paramdecs_final      : 17 18 21
paramlist            : 25 27
procdec              : 7
program              : 0
programInitiator     : 1 2
quadder              : 21 36 36 37 37 37 39 40 41 42 43 44 46 47 48 52 54 55 56 57 58 66 67 68 69 70 71
scopeInitiator       : 19 20 28
selectionIfInitiator : 36 37
stmt                 : 30 31 32
stmtlist             : 28 32
type                 : 16 21 25
vardec               : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programInitiator PROGRAM_KW ID ; declist block ;
    (2) program -> . programInitiator PROGRAM_KW ID ; block ;
    (3) programInitiator -> . empty
    (76) empty -> .

    PROGRAM_KW      reduce using rule 76 (empty -> .)

    program                        shift and go to state 1
    programInitiator               shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> programInitiator . PROGRAM_KW ID ; declist block ;
    (2) program -> programInitiator . PROGRAM_KW ID ; block ;

    PROGRAM_KW      shift and go to state 4


state 3

    (3) programInitiator -> empty .

    PROGRAM_KW      reduce using rule 3 (programInitiator -> empty .)


state 4

    (1) program -> programInitiator PROGRAM_KW . ID ; declist block ;
    (2) program -> programInitiator PROGRAM_KW . ID ; block ;

    ID              shift and go to state 5


state 5

    (1) program -> programInitiator PROGRAM_KW ID . ; declist block ;
    (2) program -> programInitiator PROGRAM_KW ID . ; block ;

    ;               shift and go to state 6


state 6

    (1) program -> programInitiator PROGRAM_KW ID ; . declist block ;
    (2) program -> programInitiator PROGRAM_KW ID ; . block ;
    (4) declist -> . dec
    (5) declist -> . declist dec
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    PROCEDURE_KW    shift and go to state 25
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41
    FOR_KW          shift and go to state 42

    declist                        shift and go to state 8
    block                          shift and go to state 9
    dec                            shift and go to state 10
    stmt                           shift and go to state 12
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    type                           shift and go to state 24
    funInitiator                   shift and go to state 27
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 7

    (65) exp -> ID . ( explist )
    (33) lvalue -> ID .

    (               shift and go to state 43
    ASSIGNMENT      reduce using rule 33 (lvalue -> ID .)
    +               reduce using rule 33 (lvalue -> ID .)
    -               reduce using rule 33 (lvalue -> ID .)
    *               reduce using rule 33 (lvalue -> ID .)
    /               reduce using rule 33 (lvalue -> ID .)
    GT              reduce using rule 33 (lvalue -> ID .)
    GE              reduce using rule 33 (lvalue -> ID .)
    NE              reduce using rule 33 (lvalue -> ID .)
    EQ              reduce using rule 33 (lvalue -> ID .)
    LT              reduce using rule 33 (lvalue -> ID .)
    LE              reduce using rule 33 (lvalue -> ID .)
    AND_THEN_KW     reduce using rule 33 (lvalue -> ID .)
    OR_ELSE_KW      reduce using rule 33 (lvalue -> ID .)
    ;               reduce using rule 33 (lvalue -> ID .)
    NUMBER_INT      reduce using rule 33 (lvalue -> ID .)
    END_KW          reduce using rule 33 (lvalue -> ID .)
    ELSE_KW         reduce using rule 33 (lvalue -> ID .)
    )               reduce using rule 33 (lvalue -> ID .)
    THEN_KW         reduce using rule 33 (lvalue -> ID .)
    ,               reduce using rule 33 (lvalue -> ID .)
    TO_KW           reduce using rule 33 (lvalue -> ID .)
    DOWNTO_KW       reduce using rule 33 (lvalue -> ID .)
    DO_KW           reduce using rule 33 (lvalue -> ID .)


state 8

    (1) program -> programInitiator PROGRAM_KW ID ; declist . block ;
    (5) declist -> declist . dec
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    PROCEDURE_KW    shift and go to state 25
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41
    FOR_KW          shift and go to state 42

    block                          shift and go to state 44
    dec                            shift and go to state 45
    stmt                           shift and go to state 12
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    type                           shift and go to state 24
    funInitiator                   shift and go to state 27
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 9

    (2) program -> programInitiator PROGRAM_KW ID ; block . ;

    ;               shift and go to state 46


state 10

    (4) declist -> dec .

    BEGIN_KW        reduce using rule 4 (declist -> dec .)
    CASE_KW         reduce using rule 4 (declist -> dec .)
    RETURN_KW       reduce using rule 4 (declist -> dec .)
    PROCEDURE_KW    reduce using rule 4 (declist -> dec .)
    IF_KW           reduce using rule 4 (declist -> dec .)
    WHILE_KW        reduce using rule 4 (declist -> dec .)
    (               reduce using rule 4 (declist -> dec .)
    NUMBER_INT      reduce using rule 4 (declist -> dec .)
    NUMBER_REAL     reduce using rule 4 (declist -> dec .)
    TRUE_KW         reduce using rule 4 (declist -> dec .)
    FALSE_KW        reduce using rule 4 (declist -> dec .)
    ID              reduce using rule 4 (declist -> dec .)
    INT_KW          reduce using rule 4 (declist -> dec .)
    REAL_KW         reduce using rule 4 (declist -> dec .)
    BOOL_KW         reduce using rule 4 (declist -> dec .)
    FUNCTION_KW     reduce using rule 4 (declist -> dec .)
    FOR_KW          reduce using rule 4 (declist -> dec .)


state 11

    (28) block -> BEGIN_KW . scopeInitiator stmtlist END_KW
    (29) scopeInitiator -> . empty
    (76) empty -> .

    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    scopeInitiator                 shift and go to state 47
    empty                          shift and go to state 48

state 12

    (30) block -> stmt .

    ;               reduce using rule 30 (block -> stmt .)
    ELSE_KW         reduce using rule 30 (block -> stmt .)
    END_KW          reduce using rule 30 (block -> stmt .)


state 13

    (6) dec -> vardec .

    BEGIN_KW        reduce using rule 6 (dec -> vardec .)
    CASE_KW         reduce using rule 6 (dec -> vardec .)
    RETURN_KW       reduce using rule 6 (dec -> vardec .)
    PROCEDURE_KW    reduce using rule 6 (dec -> vardec .)
    IF_KW           reduce using rule 6 (dec -> vardec .)
    WHILE_KW        reduce using rule 6 (dec -> vardec .)
    (               reduce using rule 6 (dec -> vardec .)
    NUMBER_INT      reduce using rule 6 (dec -> vardec .)
    NUMBER_REAL     reduce using rule 6 (dec -> vardec .)
    TRUE_KW         reduce using rule 6 (dec -> vardec .)
    FALSE_KW        reduce using rule 6 (dec -> vardec .)
    ID              reduce using rule 6 (dec -> vardec .)
    INT_KW          reduce using rule 6 (dec -> vardec .)
    REAL_KW         reduce using rule 6 (dec -> vardec .)
    BOOL_KW         reduce using rule 6 (dec -> vardec .)
    FUNCTION_KW     reduce using rule 6 (dec -> vardec .)
    FOR_KW          reduce using rule 6 (dec -> vardec .)


state 14

    (7) dec -> procdec .

    BEGIN_KW        reduce using rule 7 (dec -> procdec .)
    CASE_KW         reduce using rule 7 (dec -> procdec .)
    RETURN_KW       reduce using rule 7 (dec -> procdec .)
    PROCEDURE_KW    reduce using rule 7 (dec -> procdec .)
    IF_KW           reduce using rule 7 (dec -> procdec .)
    WHILE_KW        reduce using rule 7 (dec -> procdec .)
    (               reduce using rule 7 (dec -> procdec .)
    NUMBER_INT      reduce using rule 7 (dec -> procdec .)
    NUMBER_REAL     reduce using rule 7 (dec -> procdec .)
    TRUE_KW         reduce using rule 7 (dec -> procdec .)
    FALSE_KW        reduce using rule 7 (dec -> procdec .)
    ID              reduce using rule 7 (dec -> procdec .)
    INT_KW          reduce using rule 7 (dec -> procdec .)
    REAL_KW         reduce using rule 7 (dec -> procdec .)
    BOOL_KW         reduce using rule 7 (dec -> procdec .)
    FUNCTION_KW     reduce using rule 7 (dec -> procdec .)
    FOR_KW          reduce using rule 7 (dec -> procdec .)


state 15

    (8) dec -> funcdec .

    BEGIN_KW        reduce using rule 8 (dec -> funcdec .)
    CASE_KW         reduce using rule 8 (dec -> funcdec .)
    RETURN_KW       reduce using rule 8 (dec -> funcdec .)
    PROCEDURE_KW    reduce using rule 8 (dec -> funcdec .)
    IF_KW           reduce using rule 8 (dec -> funcdec .)
    WHILE_KW        reduce using rule 8 (dec -> funcdec .)
    (               reduce using rule 8 (dec -> funcdec .)
    NUMBER_INT      reduce using rule 8 (dec -> funcdec .)
    NUMBER_REAL     reduce using rule 8 (dec -> funcdec .)
    TRUE_KW         reduce using rule 8 (dec -> funcdec .)
    FALSE_KW        reduce using rule 8 (dec -> funcdec .)
    ID              reduce using rule 8 (dec -> funcdec .)
    INT_KW          reduce using rule 8 (dec -> funcdec .)
    REAL_KW         reduce using rule 8 (dec -> funcdec .)
    BOOL_KW         reduce using rule 8 (dec -> funcdec .)
    FUNCTION_KW     reduce using rule 8 (dec -> funcdec .)
    FOR_KW          reduce using rule 8 (dec -> funcdec .)


state 16

    (35) stmt -> assignment_stmt .

    ;               reduce using rule 35 (stmt -> assignment_stmt .)
    END_KW          reduce using rule 35 (stmt -> assignment_stmt .)
    ELSE_KW         reduce using rule 35 (stmt -> assignment_stmt .)


state 17

    (36) stmt -> selectionIfInitiator . quadder block nexter quadder
    (37) stmt -> selectionIfInitiator . quadder block nexter ELSE_KW quadder block quadder
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 49
    empty                          shift and go to state 50

state 18

    (39) stmt -> iterationInitiator . quadder block nexter
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 51
    empty                          shift and go to state 50

state 19

    (41) stmt -> for_init_up . quadder block nexter
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 52
    empty                          shift and go to state 50

state 20

    (43) stmt -> for_init_down . quadder block nexter
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 53
    empty                          shift and go to state 50

state 21

    (46) stmt -> CASE_KW . exp nexter caseelement END_KW quadder
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 54
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 22

    (50) stmt -> exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    ;               reduce using rule 50 (stmt -> exp .)
    END_KW          reduce using rule 50 (stmt -> exp .)
    ELSE_KW         reduce using rule 50 (stmt -> exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 23

    (49) stmt -> RETURN_KW . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 68
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 24

    (16) vardec -> type . idlist ;
    (14) idlist -> . iddec
    (15) idlist -> . idlist , iddec
    (12) iddec -> . ID
    (13) iddec -> . ID ASSIGNMENT exp

    ID              shift and go to state 71

    idlist                         shift and go to state 69
    iddec                          shift and go to state 70

state 25

    (17) procdec -> PROCEDURE_KW . ID ( paramdecs_final ) block ;
    (18) procdec -> PROCEDURE_KW . ID ( paramdecs_final ) declist block ;

    ID              shift and go to state 72


state 26

    (59) exp -> ( . exp )
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 73
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 27

    (19) funcdec -> funInitiator . scopeInitiator block ;
    (20) funcdec -> funInitiator . scopeInitiator declist block ;
    (29) scopeInitiator -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    PROCEDURE_KW    reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)
    INT_KW          reduce using rule 76 (empty -> .)
    REAL_KW         reduce using rule 76 (empty -> .)
    BOOL_KW         reduce using rule 76 (empty -> .)
    FUNCTION_KW     reduce using rule 76 (empty -> .)

    scopeInitiator                 shift and go to state 74
    empty                          shift and go to state 48

state 28

    (34) assignment_stmt -> lvalue . ASSIGNMENT exp
    (64) exp -> lvalue .

    ASSIGNMENT      shift and go to state 75
    +               reduce using rule 64 (exp -> lvalue .)
    -               reduce using rule 64 (exp -> lvalue .)
    *               reduce using rule 64 (exp -> lvalue .)
    /               reduce using rule 64 (exp -> lvalue .)
    GT              reduce using rule 64 (exp -> lvalue .)
    GE              reduce using rule 64 (exp -> lvalue .)
    NE              reduce using rule 64 (exp -> lvalue .)
    EQ              reduce using rule 64 (exp -> lvalue .)
    LT              reduce using rule 64 (exp -> lvalue .)
    LE              reduce using rule 64 (exp -> lvalue .)
    AND_THEN_KW     reduce using rule 64 (exp -> lvalue .)
    OR_ELSE_KW      reduce using rule 64 (exp -> lvalue .)
    ;               reduce using rule 64 (exp -> lvalue .)
    END_KW          reduce using rule 64 (exp -> lvalue .)
    ELSE_KW         reduce using rule 64 (exp -> lvalue .)


state 29

    (38) selectionIfInitiator -> IF_KW . exp THEN_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 76
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 30

    (40) iterationInitiator -> WHILE_KW . quadder exp DO_KW
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 77
    empty                          shift and go to state 50

state 31

    (42) for_init_up -> forInitiator . TO_KW quadder exp DO_KW
    (44) for_init_down -> forInitiator . DOWNTO_KW quadder exp DO_KW

    TO_KW           shift and go to state 78
    DOWNTO_KW       shift and go to state 79


state 32

    (52) exp -> andInitiator . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 80
    empty                          shift and go to state 50

state 33

    (54) exp -> orInitiator . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 81
    empty                          shift and go to state 50

state 34

    (60) exp -> NUMBER_INT .

    +               reduce using rule 60 (exp -> NUMBER_INT .)
    -               reduce using rule 60 (exp -> NUMBER_INT .)
    *               reduce using rule 60 (exp -> NUMBER_INT .)
    /               reduce using rule 60 (exp -> NUMBER_INT .)
    GT              reduce using rule 60 (exp -> NUMBER_INT .)
    GE              reduce using rule 60 (exp -> NUMBER_INT .)
    NE              reduce using rule 60 (exp -> NUMBER_INT .)
    EQ              reduce using rule 60 (exp -> NUMBER_INT .)
    LT              reduce using rule 60 (exp -> NUMBER_INT .)
    LE              reduce using rule 60 (exp -> NUMBER_INT .)
    AND_THEN_KW     reduce using rule 60 (exp -> NUMBER_INT .)
    OR_ELSE_KW      reduce using rule 60 (exp -> NUMBER_INT .)
    ;               reduce using rule 60 (exp -> NUMBER_INT .)
    NUMBER_INT      reduce using rule 60 (exp -> NUMBER_INT .)
    END_KW          reduce using rule 60 (exp -> NUMBER_INT .)
    ELSE_KW         reduce using rule 60 (exp -> NUMBER_INT .)
    )               reduce using rule 60 (exp -> NUMBER_INT .)
    THEN_KW         reduce using rule 60 (exp -> NUMBER_INT .)
    ,               reduce using rule 60 (exp -> NUMBER_INT .)
    TO_KW           reduce using rule 60 (exp -> NUMBER_INT .)
    DOWNTO_KW       reduce using rule 60 (exp -> NUMBER_INT .)
    DO_KW           reduce using rule 60 (exp -> NUMBER_INT .)


state 35

    (61) exp -> NUMBER_REAL .

    +               reduce using rule 61 (exp -> NUMBER_REAL .)
    -               reduce using rule 61 (exp -> NUMBER_REAL .)
    *               reduce using rule 61 (exp -> NUMBER_REAL .)
    /               reduce using rule 61 (exp -> NUMBER_REAL .)
    GT              reduce using rule 61 (exp -> NUMBER_REAL .)
    GE              reduce using rule 61 (exp -> NUMBER_REAL .)
    NE              reduce using rule 61 (exp -> NUMBER_REAL .)
    EQ              reduce using rule 61 (exp -> NUMBER_REAL .)
    LT              reduce using rule 61 (exp -> NUMBER_REAL .)
    LE              reduce using rule 61 (exp -> NUMBER_REAL .)
    AND_THEN_KW     reduce using rule 61 (exp -> NUMBER_REAL .)
    OR_ELSE_KW      reduce using rule 61 (exp -> NUMBER_REAL .)
    ;               reduce using rule 61 (exp -> NUMBER_REAL .)
    NUMBER_INT      reduce using rule 61 (exp -> NUMBER_REAL .)
    END_KW          reduce using rule 61 (exp -> NUMBER_REAL .)
    ELSE_KW         reduce using rule 61 (exp -> NUMBER_REAL .)
    )               reduce using rule 61 (exp -> NUMBER_REAL .)
    THEN_KW         reduce using rule 61 (exp -> NUMBER_REAL .)
    ,               reduce using rule 61 (exp -> NUMBER_REAL .)
    TO_KW           reduce using rule 61 (exp -> NUMBER_REAL .)
    DOWNTO_KW       reduce using rule 61 (exp -> NUMBER_REAL .)
    DO_KW           reduce using rule 61 (exp -> NUMBER_REAL .)


state 36

    (62) exp -> TRUE_KW .

    +               reduce using rule 62 (exp -> TRUE_KW .)
    -               reduce using rule 62 (exp -> TRUE_KW .)
    *               reduce using rule 62 (exp -> TRUE_KW .)
    /               reduce using rule 62 (exp -> TRUE_KW .)
    GT              reduce using rule 62 (exp -> TRUE_KW .)
    GE              reduce using rule 62 (exp -> TRUE_KW .)
    NE              reduce using rule 62 (exp -> TRUE_KW .)
    EQ              reduce using rule 62 (exp -> TRUE_KW .)
    LT              reduce using rule 62 (exp -> TRUE_KW .)
    LE              reduce using rule 62 (exp -> TRUE_KW .)
    AND_THEN_KW     reduce using rule 62 (exp -> TRUE_KW .)
    OR_ELSE_KW      reduce using rule 62 (exp -> TRUE_KW .)
    ;               reduce using rule 62 (exp -> TRUE_KW .)
    NUMBER_INT      reduce using rule 62 (exp -> TRUE_KW .)
    END_KW          reduce using rule 62 (exp -> TRUE_KW .)
    ELSE_KW         reduce using rule 62 (exp -> TRUE_KW .)
    )               reduce using rule 62 (exp -> TRUE_KW .)
    THEN_KW         reduce using rule 62 (exp -> TRUE_KW .)
    ,               reduce using rule 62 (exp -> TRUE_KW .)
    TO_KW           reduce using rule 62 (exp -> TRUE_KW .)
    DOWNTO_KW       reduce using rule 62 (exp -> TRUE_KW .)
    DO_KW           reduce using rule 62 (exp -> TRUE_KW .)


state 37

    (63) exp -> FALSE_KW .

    +               reduce using rule 63 (exp -> FALSE_KW .)
    -               reduce using rule 63 (exp -> FALSE_KW .)
    *               reduce using rule 63 (exp -> FALSE_KW .)
    /               reduce using rule 63 (exp -> FALSE_KW .)
    GT              reduce using rule 63 (exp -> FALSE_KW .)
    GE              reduce using rule 63 (exp -> FALSE_KW .)
    NE              reduce using rule 63 (exp -> FALSE_KW .)
    EQ              reduce using rule 63 (exp -> FALSE_KW .)
    LT              reduce using rule 63 (exp -> FALSE_KW .)
    LE              reduce using rule 63 (exp -> FALSE_KW .)
    AND_THEN_KW     reduce using rule 63 (exp -> FALSE_KW .)
    OR_ELSE_KW      reduce using rule 63 (exp -> FALSE_KW .)
    ;               reduce using rule 63 (exp -> FALSE_KW .)
    NUMBER_INT      reduce using rule 63 (exp -> FALSE_KW .)
    END_KW          reduce using rule 63 (exp -> FALSE_KW .)
    ELSE_KW         reduce using rule 63 (exp -> FALSE_KW .)
    )               reduce using rule 63 (exp -> FALSE_KW .)
    THEN_KW         reduce using rule 63 (exp -> FALSE_KW .)
    ,               reduce using rule 63 (exp -> FALSE_KW .)
    TO_KW           reduce using rule 63 (exp -> FALSE_KW .)
    DOWNTO_KW       reduce using rule 63 (exp -> FALSE_KW .)
    DO_KW           reduce using rule 63 (exp -> FALSE_KW .)


state 38

    (9) type -> INT_KW .

    ID              reduce using rule 9 (type -> INT_KW .)
    BEGIN_KW        reduce using rule 9 (type -> INT_KW .)
    CASE_KW         reduce using rule 9 (type -> INT_KW .)
    RETURN_KW       reduce using rule 9 (type -> INT_KW .)
    IF_KW           reduce using rule 9 (type -> INT_KW .)
    WHILE_KW        reduce using rule 9 (type -> INT_KW .)
    (               reduce using rule 9 (type -> INT_KW .)
    NUMBER_INT      reduce using rule 9 (type -> INT_KW .)
    NUMBER_REAL     reduce using rule 9 (type -> INT_KW .)
    TRUE_KW         reduce using rule 9 (type -> INT_KW .)
    FALSE_KW        reduce using rule 9 (type -> INT_KW .)
    PROCEDURE_KW    reduce using rule 9 (type -> INT_KW .)
    FOR_KW          reduce using rule 9 (type -> INT_KW .)
    INT_KW          reduce using rule 9 (type -> INT_KW .)
    REAL_KW         reduce using rule 9 (type -> INT_KW .)
    BOOL_KW         reduce using rule 9 (type -> INT_KW .)
    FUNCTION_KW     reduce using rule 9 (type -> INT_KW .)


state 39

    (10) type -> REAL_KW .

    ID              reduce using rule 10 (type -> REAL_KW .)
    BEGIN_KW        reduce using rule 10 (type -> REAL_KW .)
    CASE_KW         reduce using rule 10 (type -> REAL_KW .)
    RETURN_KW       reduce using rule 10 (type -> REAL_KW .)
    IF_KW           reduce using rule 10 (type -> REAL_KW .)
    WHILE_KW        reduce using rule 10 (type -> REAL_KW .)
    (               reduce using rule 10 (type -> REAL_KW .)
    NUMBER_INT      reduce using rule 10 (type -> REAL_KW .)
    NUMBER_REAL     reduce using rule 10 (type -> REAL_KW .)
    TRUE_KW         reduce using rule 10 (type -> REAL_KW .)
    FALSE_KW        reduce using rule 10 (type -> REAL_KW .)
    PROCEDURE_KW    reduce using rule 10 (type -> REAL_KW .)
    FOR_KW          reduce using rule 10 (type -> REAL_KW .)
    INT_KW          reduce using rule 10 (type -> REAL_KW .)
    REAL_KW         reduce using rule 10 (type -> REAL_KW .)
    BOOL_KW         reduce using rule 10 (type -> REAL_KW .)
    FUNCTION_KW     reduce using rule 10 (type -> REAL_KW .)


state 40

    (11) type -> BOOL_KW .

    ID              reduce using rule 11 (type -> BOOL_KW .)
    BEGIN_KW        reduce using rule 11 (type -> BOOL_KW .)
    CASE_KW         reduce using rule 11 (type -> BOOL_KW .)
    RETURN_KW       reduce using rule 11 (type -> BOOL_KW .)
    IF_KW           reduce using rule 11 (type -> BOOL_KW .)
    WHILE_KW        reduce using rule 11 (type -> BOOL_KW .)
    (               reduce using rule 11 (type -> BOOL_KW .)
    NUMBER_INT      reduce using rule 11 (type -> BOOL_KW .)
    NUMBER_REAL     reduce using rule 11 (type -> BOOL_KW .)
    TRUE_KW         reduce using rule 11 (type -> BOOL_KW .)
    FALSE_KW        reduce using rule 11 (type -> BOOL_KW .)
    PROCEDURE_KW    reduce using rule 11 (type -> BOOL_KW .)
    FOR_KW          reduce using rule 11 (type -> BOOL_KW .)
    INT_KW          reduce using rule 11 (type -> BOOL_KW .)
    REAL_KW         reduce using rule 11 (type -> BOOL_KW .)
    BOOL_KW         reduce using rule 11 (type -> BOOL_KW .)
    FUNCTION_KW     reduce using rule 11 (type -> BOOL_KW .)


state 41

    (21) funInitiator -> FUNCTION_KW . ID ( quadder nexter paramdecs_final ) : type

    ID              shift and go to state 82


state 42

    (45) forInitiator -> FOR_KW . assignment_stmt
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (33) lvalue -> . ID

    ID              shift and go to state 85

    assignment_stmt                shift and go to state 83
    lvalue                         shift and go to state 84

state 43

    (65) exp -> ID ( . explist )
    (72) explist -> . exp
    (73) explist -> . explist , exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    explist                        shift and go to state 86
    exp                            shift and go to state 87
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 44

    (1) program -> programInitiator PROGRAM_KW ID ; declist block . ;

    ;               shift and go to state 88


state 45

    (5) declist -> declist dec .

    BEGIN_KW        reduce using rule 5 (declist -> declist dec .)
    CASE_KW         reduce using rule 5 (declist -> declist dec .)
    RETURN_KW       reduce using rule 5 (declist -> declist dec .)
    PROCEDURE_KW    reduce using rule 5 (declist -> declist dec .)
    IF_KW           reduce using rule 5 (declist -> declist dec .)
    WHILE_KW        reduce using rule 5 (declist -> declist dec .)
    (               reduce using rule 5 (declist -> declist dec .)
    NUMBER_INT      reduce using rule 5 (declist -> declist dec .)
    NUMBER_REAL     reduce using rule 5 (declist -> declist dec .)
    TRUE_KW         reduce using rule 5 (declist -> declist dec .)
    FALSE_KW        reduce using rule 5 (declist -> declist dec .)
    ID              reduce using rule 5 (declist -> declist dec .)
    INT_KW          reduce using rule 5 (declist -> declist dec .)
    REAL_KW         reduce using rule 5 (declist -> declist dec .)
    BOOL_KW         reduce using rule 5 (declist -> declist dec .)
    FUNCTION_KW     reduce using rule 5 (declist -> declist dec .)
    FOR_KW          reduce using rule 5 (declist -> declist dec .)


state 46

    (2) program -> programInitiator PROGRAM_KW ID ; block ; .

    $end            reduce using rule 2 (program -> programInitiator PROGRAM_KW ID ; block ; .)


state 47

    (28) block -> BEGIN_KW scopeInitiator . stmtlist END_KW
    (31) stmtlist -> . stmt
    (32) stmtlist -> . stmtlist ; stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    stmtlist                       shift and go to state 89
    stmt                           shift and go to state 90
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 48

    (29) scopeInitiator -> empty .

    CASE_KW         reduce using rule 29 (scopeInitiator -> empty .)
    RETURN_KW       reduce using rule 29 (scopeInitiator -> empty .)
    IF_KW           reduce using rule 29 (scopeInitiator -> empty .)
    WHILE_KW        reduce using rule 29 (scopeInitiator -> empty .)
    (               reduce using rule 29 (scopeInitiator -> empty .)
    NUMBER_INT      reduce using rule 29 (scopeInitiator -> empty .)
    NUMBER_REAL     reduce using rule 29 (scopeInitiator -> empty .)
    TRUE_KW         reduce using rule 29 (scopeInitiator -> empty .)
    FALSE_KW        reduce using rule 29 (scopeInitiator -> empty .)
    ID              reduce using rule 29 (scopeInitiator -> empty .)
    FOR_KW          reduce using rule 29 (scopeInitiator -> empty .)
    BEGIN_KW        reduce using rule 29 (scopeInitiator -> empty .)
    PROCEDURE_KW    reduce using rule 29 (scopeInitiator -> empty .)
    INT_KW          reduce using rule 29 (scopeInitiator -> empty .)
    REAL_KW         reduce using rule 29 (scopeInitiator -> empty .)
    BOOL_KW         reduce using rule 29 (scopeInitiator -> empty .)
    FUNCTION_KW     reduce using rule 29 (scopeInitiator -> empty .)


state 49

    (36) stmt -> selectionIfInitiator quadder . block nexter quadder
    (37) stmt -> selectionIfInitiator quadder . block nexter ELSE_KW quadder block quadder
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    selectionIfInitiator           shift and go to state 17
    block                          shift and go to state 91
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 50

    (74) quadder -> empty .

    BEGIN_KW        reduce using rule 74 (quadder -> empty .)
    CASE_KW         reduce using rule 74 (quadder -> empty .)
    RETURN_KW       reduce using rule 74 (quadder -> empty .)
    IF_KW           reduce using rule 74 (quadder -> empty .)
    WHILE_KW        reduce using rule 74 (quadder -> empty .)
    (               reduce using rule 74 (quadder -> empty .)
    NUMBER_INT      reduce using rule 74 (quadder -> empty .)
    NUMBER_REAL     reduce using rule 74 (quadder -> empty .)
    TRUE_KW         reduce using rule 74 (quadder -> empty .)
    FALSE_KW        reduce using rule 74 (quadder -> empty .)
    ID              reduce using rule 74 (quadder -> empty .)
    FOR_KW          reduce using rule 74 (quadder -> empty .)
    INT_KW          reduce using rule 74 (quadder -> empty .)
    REAL_KW         reduce using rule 74 (quadder -> empty .)
    BOOL_KW         reduce using rule 74 (quadder -> empty .)
    ;               reduce using rule 74 (quadder -> empty .)
    END_KW          reduce using rule 74 (quadder -> empty .)
    ELSE_KW         reduce using rule 74 (quadder -> empty .)


state 51

    (39) stmt -> iterationInitiator quadder . block nexter
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    iterationInitiator             shift and go to state 18
    block                          shift and go to state 92
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 52

    (41) stmt -> for_init_up quadder . block nexter
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    for_init_up                    shift and go to state 19
    block                          shift and go to state 93
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 53

    (43) stmt -> for_init_down quadder . block nexter
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    for_init_down                  shift and go to state 20
    block                          shift and go to state 94
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 54

    (46) stmt -> CASE_KW exp . nexter caseelement END_KW quadder
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW
    (75) nexter -> . empty
    (76) empty -> .

    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67
    NUMBER_INT      reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 95
    empty                          shift and go to state 96

state 55

    (64) exp -> lvalue .

    +               reduce using rule 64 (exp -> lvalue .)
    -               reduce using rule 64 (exp -> lvalue .)
    *               reduce using rule 64 (exp -> lvalue .)
    /               reduce using rule 64 (exp -> lvalue .)
    GT              reduce using rule 64 (exp -> lvalue .)
    GE              reduce using rule 64 (exp -> lvalue .)
    NE              reduce using rule 64 (exp -> lvalue .)
    EQ              reduce using rule 64 (exp -> lvalue .)
    LT              reduce using rule 64 (exp -> lvalue .)
    LE              reduce using rule 64 (exp -> lvalue .)
    AND_THEN_KW     reduce using rule 64 (exp -> lvalue .)
    OR_ELSE_KW      reduce using rule 64 (exp -> lvalue .)
    NUMBER_INT      reduce using rule 64 (exp -> lvalue .)
    ;               reduce using rule 64 (exp -> lvalue .)
    END_KW          reduce using rule 64 (exp -> lvalue .)
    ELSE_KW         reduce using rule 64 (exp -> lvalue .)
    )               reduce using rule 64 (exp -> lvalue .)
    THEN_KW         reduce using rule 64 (exp -> lvalue .)
    ,               reduce using rule 64 (exp -> lvalue .)
    TO_KW           reduce using rule 64 (exp -> lvalue .)
    DOWNTO_KW       reduce using rule 64 (exp -> lvalue .)
    DO_KW           reduce using rule 64 (exp -> lvalue .)


state 56

    (55) exp -> exp + . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 97
    empty                          shift and go to state 50

state 57

    (56) exp -> exp - . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 98
    empty                          shift and go to state 50

state 58

    (57) exp -> exp * . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 99
    empty                          shift and go to state 50

state 59

    (58) exp -> exp / . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 100
    empty                          shift and go to state 50

state 60

    (66) exp -> exp GT . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 101
    empty                          shift and go to state 50

state 61

    (67) exp -> exp GE . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 102
    empty                          shift and go to state 50

state 62

    (68) exp -> exp NE . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 103
    empty                          shift and go to state 50

state 63

    (69) exp -> exp EQ . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 104
    empty                          shift and go to state 50

state 64

    (70) exp -> exp LT . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 105
    empty                          shift and go to state 50

state 65

    (71) exp -> exp LE . quadder exp
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 106
    empty                          shift and go to state 50

state 66

    (51) andInitiator -> exp AND_THEN_KW .

    (               reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)
    NUMBER_INT      reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)
    NUMBER_REAL     reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)
    TRUE_KW         reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)
    FALSE_KW        reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)
    ID              reduce using rule 51 (andInitiator -> exp AND_THEN_KW .)


state 67

    (53) orInitiator -> exp OR_ELSE_KW .

    (               reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)
    NUMBER_INT      reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)
    NUMBER_REAL     reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)
    TRUE_KW         reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)
    FALSE_KW        reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)
    ID              reduce using rule 53 (orInitiator -> exp OR_ELSE_KW .)


state 68

    (49) stmt -> RETURN_KW exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    ;               reduce using rule 49 (stmt -> RETURN_KW exp .)
    END_KW          reduce using rule 49 (stmt -> RETURN_KW exp .)
    ELSE_KW         reduce using rule 49 (stmt -> RETURN_KW exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 69

    (16) vardec -> type idlist . ;
    (15) idlist -> idlist . , iddec

    ;               shift and go to state 107
    ,               shift and go to state 108


state 70

    (14) idlist -> iddec .

    ;               reduce using rule 14 (idlist -> iddec .)
    ,               reduce using rule 14 (idlist -> iddec .)


state 71

    (12) iddec -> ID .
    (13) iddec -> ID . ASSIGNMENT exp

    ;               reduce using rule 12 (iddec -> ID .)
    ,               reduce using rule 12 (iddec -> ID .)
    ASSIGNMENT      shift and go to state 109


state 72

    (17) procdec -> PROCEDURE_KW ID . ( paramdecs_final ) block ;
    (18) procdec -> PROCEDURE_KW ID . ( paramdecs_final ) declist block ;

    (               shift and go to state 110


state 73

    (59) exp -> ( exp . )
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    )               shift and go to state 111
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 74

    (19) funcdec -> funInitiator scopeInitiator . block ;
    (20) funcdec -> funInitiator scopeInitiator . declist block ;
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (4) declist -> . dec
    (5) declist -> . declist dec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    PROCEDURE_KW    shift and go to state 25
    FOR_KW          shift and go to state 42
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41

    funInitiator                   shift and go to state 27
    block                          shift and go to state 112
    declist                        shift and go to state 113
    stmt                           shift and go to state 12
    dec                            shift and go to state 10
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    type                           shift and go to state 24

state 75

    (34) assignment_stmt -> lvalue ASSIGNMENT . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    lvalue                         shift and go to state 55
    exp                            shift and go to state 114
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 76

    (38) selectionIfInitiator -> IF_KW exp . THEN_KW
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    THEN_KW         shift and go to state 115
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 77

    (40) iterationInitiator -> WHILE_KW quadder . exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 116
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 78

    (42) for_init_up -> forInitiator TO_KW . quadder exp DO_KW
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 117
    empty                          shift and go to state 50

state 79

    (44) for_init_down -> forInitiator DOWNTO_KW . quadder exp DO_KW
    (74) quadder -> . empty
    (76) empty -> .

    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 118
    empty                          shift and go to state 50

state 80

    (52) exp -> andInitiator quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    andInitiator                   shift and go to state 32
    exp                            shift and go to state 119
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 81

    (54) exp -> orInitiator quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    orInitiator                    shift and go to state 33
    exp                            shift and go to state 120
    andInitiator                   shift and go to state 32
    lvalue                         shift and go to state 55

state 82

    (21) funInitiator -> FUNCTION_KW ID . ( quadder nexter paramdecs_final ) : type

    (               shift and go to state 121


state 83

    (45) forInitiator -> FOR_KW assignment_stmt .

    TO_KW           reduce using rule 45 (forInitiator -> FOR_KW assignment_stmt .)
    DOWNTO_KW       reduce using rule 45 (forInitiator -> FOR_KW assignment_stmt .)


state 84

    (34) assignment_stmt -> lvalue . ASSIGNMENT exp

    ASSIGNMENT      shift and go to state 75


state 85

    (33) lvalue -> ID .

    ASSIGNMENT      reduce using rule 33 (lvalue -> ID .)


state 86

    (65) exp -> ID ( explist . )
    (73) explist -> explist . , exp

    )               shift and go to state 122
    ,               shift and go to state 123


state 87

    (72) explist -> exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    )               reduce using rule 72 (explist -> exp .)
    ,               reduce using rule 72 (explist -> exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 88

    (1) program -> programInitiator PROGRAM_KW ID ; declist block ; .

    $end            reduce using rule 1 (program -> programInitiator PROGRAM_KW ID ; declist block ; .)


state 89

    (28) block -> BEGIN_KW scopeInitiator stmtlist . END_KW
    (32) stmtlist -> stmtlist . ; stmt

    END_KW          shift and go to state 124
    ;               shift and go to state 125


state 90

    (31) stmtlist -> stmt .

    END_KW          reduce using rule 31 (stmtlist -> stmt .)
    ;               reduce using rule 31 (stmtlist -> stmt .)


state 91

    (36) stmt -> selectionIfInitiator quadder block . nexter quadder
    (37) stmt -> selectionIfInitiator quadder block . nexter ELSE_KW quadder block quadder
    (75) nexter -> . empty
    (76) empty -> .

    ELSE_KW         reduce using rule 76 (empty -> .)
    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 126
    empty                          shift and go to state 96

state 92

    (39) stmt -> iterationInitiator quadder block . nexter
    (75) nexter -> . empty
    (76) empty -> .

    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)
    ELSE_KW         reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 127
    empty                          shift and go to state 96

state 93

    (41) stmt -> for_init_up quadder block . nexter
    (75) nexter -> . empty
    (76) empty -> .

    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)
    ELSE_KW         reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 128
    empty                          shift and go to state 96

state 94

    (43) stmt -> for_init_down quadder block . nexter
    (75) nexter -> . empty
    (76) empty -> .

    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)
    ELSE_KW         reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 129
    empty                          shift and go to state 96

state 95

    (46) stmt -> CASE_KW exp nexter . caseelement END_KW quadder
    (47) caseelement -> . NUMBER_INT : quadder block ; nexter
    (48) caseelement -> . caseelement NUMBER_INT : quadder block ; nexter

    NUMBER_INT      shift and go to state 131

    caseelement                    shift and go to state 130

state 96

    (75) nexter -> empty .

    NUMBER_INT      reduce using rule 75 (nexter -> empty .)
    ELSE_KW         reduce using rule 75 (nexter -> empty .)
    ;               reduce using rule 75 (nexter -> empty .)
    END_KW          reduce using rule 75 (nexter -> empty .)
    INT_KW          reduce using rule 75 (nexter -> empty .)
    REAL_KW         reduce using rule 75 (nexter -> empty .)
    BOOL_KW         reduce using rule 75 (nexter -> empty .)


state 97

    (55) exp -> exp + quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 132
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 98

    (56) exp -> exp - quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 133
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 99

    (57) exp -> exp * quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 134
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 100

    (58) exp -> exp / quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 135
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 101

    (66) exp -> exp GT quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 136
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 102

    (67) exp -> exp GE quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 137
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 103

    (68) exp -> exp NE quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 138
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 104

    (69) exp -> exp EQ quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 139
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 105

    (70) exp -> exp LT quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 140
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 106

    (71) exp -> exp LE quadder . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 141
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 107

    (16) vardec -> type idlist ; .

    BEGIN_KW        reduce using rule 16 (vardec -> type idlist ; .)
    CASE_KW         reduce using rule 16 (vardec -> type idlist ; .)
    RETURN_KW       reduce using rule 16 (vardec -> type idlist ; .)
    PROCEDURE_KW    reduce using rule 16 (vardec -> type idlist ; .)
    IF_KW           reduce using rule 16 (vardec -> type idlist ; .)
    WHILE_KW        reduce using rule 16 (vardec -> type idlist ; .)
    (               reduce using rule 16 (vardec -> type idlist ; .)
    NUMBER_INT      reduce using rule 16 (vardec -> type idlist ; .)
    NUMBER_REAL     reduce using rule 16 (vardec -> type idlist ; .)
    TRUE_KW         reduce using rule 16 (vardec -> type idlist ; .)
    FALSE_KW        reduce using rule 16 (vardec -> type idlist ; .)
    ID              reduce using rule 16 (vardec -> type idlist ; .)
    INT_KW          reduce using rule 16 (vardec -> type idlist ; .)
    REAL_KW         reduce using rule 16 (vardec -> type idlist ; .)
    BOOL_KW         reduce using rule 16 (vardec -> type idlist ; .)
    FUNCTION_KW     reduce using rule 16 (vardec -> type idlist ; .)
    FOR_KW          reduce using rule 16 (vardec -> type idlist ; .)


state 108

    (15) idlist -> idlist , . iddec
    (12) iddec -> . ID
    (13) iddec -> . ID ASSIGNMENT exp

    ID              shift and go to state 71

    iddec                          shift and go to state 142

state 109

    (13) iddec -> ID ASSIGNMENT . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 143
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 110

    (17) procdec -> PROCEDURE_KW ID ( . paramdecs_final ) block ;
    (18) procdec -> PROCEDURE_KW ID ( . paramdecs_final ) declist block ;
    (22) paramdecs_final -> . paramdecs
    (23) paramdecs -> . paramdec
    (24) paramdecs -> . paramdecs ; paramdec
    (25) paramdec -> . type paramlist
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW

    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40

    paramdecs_final                shift and go to state 144
    paramdecs                      shift and go to state 145
    paramdec                       shift and go to state 146
    type                           shift and go to state 147

state 111

    (59) exp -> ( exp ) .

    +               reduce using rule 59 (exp -> ( exp ) .)
    -               reduce using rule 59 (exp -> ( exp ) .)
    *               reduce using rule 59 (exp -> ( exp ) .)
    /               reduce using rule 59 (exp -> ( exp ) .)
    GT              reduce using rule 59 (exp -> ( exp ) .)
    GE              reduce using rule 59 (exp -> ( exp ) .)
    NE              reduce using rule 59 (exp -> ( exp ) .)
    EQ              reduce using rule 59 (exp -> ( exp ) .)
    LT              reduce using rule 59 (exp -> ( exp ) .)
    LE              reduce using rule 59 (exp -> ( exp ) .)
    AND_THEN_KW     reduce using rule 59 (exp -> ( exp ) .)
    OR_ELSE_KW      reduce using rule 59 (exp -> ( exp ) .)
    ;               reduce using rule 59 (exp -> ( exp ) .)
    NUMBER_INT      reduce using rule 59 (exp -> ( exp ) .)
    END_KW          reduce using rule 59 (exp -> ( exp ) .)
    ELSE_KW         reduce using rule 59 (exp -> ( exp ) .)
    )               reduce using rule 59 (exp -> ( exp ) .)
    THEN_KW         reduce using rule 59 (exp -> ( exp ) .)
    ,               reduce using rule 59 (exp -> ( exp ) .)
    TO_KW           reduce using rule 59 (exp -> ( exp ) .)
    DOWNTO_KW       reduce using rule 59 (exp -> ( exp ) .)
    DO_KW           reduce using rule 59 (exp -> ( exp ) .)


state 112

    (19) funcdec -> funInitiator scopeInitiator block . ;

    ;               shift and go to state 148


state 113

    (20) funcdec -> funInitiator scopeInitiator declist . block ;
    (5) declist -> declist . dec
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    PROCEDURE_KW    shift and go to state 25
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41
    FOR_KW          shift and go to state 42

    funInitiator                   shift and go to state 27
    block                          shift and go to state 149
    dec                            shift and go to state 45
    stmt                           shift and go to state 12
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    type                           shift and go to state 24
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 114

    (34) assignment_stmt -> lvalue ASSIGNMENT exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    ;               reduce using rule 34 (assignment_stmt -> lvalue ASSIGNMENT exp .)
    TO_KW           reduce using rule 34 (assignment_stmt -> lvalue ASSIGNMENT exp .)
    DOWNTO_KW       reduce using rule 34 (assignment_stmt -> lvalue ASSIGNMENT exp .)
    END_KW          reduce using rule 34 (assignment_stmt -> lvalue ASSIGNMENT exp .)
    ELSE_KW         reduce using rule 34 (assignment_stmt -> lvalue ASSIGNMENT exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 115

    (38) selectionIfInitiator -> IF_KW exp THEN_KW .

    BEGIN_KW        reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    CASE_KW         reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    RETURN_KW       reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    IF_KW           reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    WHILE_KW        reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    (               reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    NUMBER_INT      reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    NUMBER_REAL     reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    TRUE_KW         reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    FALSE_KW        reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    ID              reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)
    FOR_KW          reduce using rule 38 (selectionIfInitiator -> IF_KW exp THEN_KW .)


state 116

    (40) iterationInitiator -> WHILE_KW quadder exp . DO_KW
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    DO_KW           shift and go to state 150
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 117

    (42) for_init_up -> forInitiator TO_KW quadder . exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 151
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 118

    (44) for_init_down -> forInitiator DOWNTO_KW quadder . exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 152
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 119

    (52) exp -> andInitiator quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND_THEN_KW resolved as shift
  ! shift/reduce conflict for OR_ELSE_KW resolved as shift
    ;               reduce using rule 52 (exp -> andInitiator quadder exp .)
    NUMBER_INT      reduce using rule 52 (exp -> andInitiator quadder exp .)
    END_KW          reduce using rule 52 (exp -> andInitiator quadder exp .)
    ELSE_KW         reduce using rule 52 (exp -> andInitiator quadder exp .)
    )               reduce using rule 52 (exp -> andInitiator quadder exp .)
    THEN_KW         reduce using rule 52 (exp -> andInitiator quadder exp .)
    ,               reduce using rule 52 (exp -> andInitiator quadder exp .)
    TO_KW           reduce using rule 52 (exp -> andInitiator quadder exp .)
    DOWNTO_KW       reduce using rule 52 (exp -> andInitiator quadder exp .)
    DO_KW           reduce using rule 52 (exp -> andInitiator quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67

  ! +               [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! -               [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! *               [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! /               [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! GT              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! GE              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! NE              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! LT              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! LE              [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! AND_THEN_KW     [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]
  ! OR_ELSE_KW      [ reduce using rule 52 (exp -> andInitiator quadder exp .) ]


state 120

    (54) exp -> orInitiator quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND_THEN_KW resolved as shift
  ! shift/reduce conflict for OR_ELSE_KW resolved as shift
    ;               reduce using rule 54 (exp -> orInitiator quadder exp .)
    NUMBER_INT      reduce using rule 54 (exp -> orInitiator quadder exp .)
    END_KW          reduce using rule 54 (exp -> orInitiator quadder exp .)
    ELSE_KW         reduce using rule 54 (exp -> orInitiator quadder exp .)
    )               reduce using rule 54 (exp -> orInitiator quadder exp .)
    THEN_KW         reduce using rule 54 (exp -> orInitiator quadder exp .)
    ,               reduce using rule 54 (exp -> orInitiator quadder exp .)
    TO_KW           reduce using rule 54 (exp -> orInitiator quadder exp .)
    DOWNTO_KW       reduce using rule 54 (exp -> orInitiator quadder exp .)
    DO_KW           reduce using rule 54 (exp -> orInitiator quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67

  ! +               [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! -               [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! *               [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! /               [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! GT              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! GE              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! NE              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! EQ              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! LT              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! LE              [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! AND_THEN_KW     [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]
  ! OR_ELSE_KW      [ reduce using rule 54 (exp -> orInitiator quadder exp .) ]


state 121

    (21) funInitiator -> FUNCTION_KW ID ( . quadder nexter paramdecs_final ) : type
    (74) quadder -> . empty
    (76) empty -> .

    INT_KW          reduce using rule 76 (empty -> .)
    REAL_KW         reduce using rule 76 (empty -> .)
    BOOL_KW         reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 153
    empty                          shift and go to state 50

state 122

    (65) exp -> ID ( explist ) .

    +               reduce using rule 65 (exp -> ID ( explist ) .)
    -               reduce using rule 65 (exp -> ID ( explist ) .)
    *               reduce using rule 65 (exp -> ID ( explist ) .)
    /               reduce using rule 65 (exp -> ID ( explist ) .)
    GT              reduce using rule 65 (exp -> ID ( explist ) .)
    GE              reduce using rule 65 (exp -> ID ( explist ) .)
    NE              reduce using rule 65 (exp -> ID ( explist ) .)
    EQ              reduce using rule 65 (exp -> ID ( explist ) .)
    LT              reduce using rule 65 (exp -> ID ( explist ) .)
    LE              reduce using rule 65 (exp -> ID ( explist ) .)
    AND_THEN_KW     reduce using rule 65 (exp -> ID ( explist ) .)
    OR_ELSE_KW      reduce using rule 65 (exp -> ID ( explist ) .)
    ;               reduce using rule 65 (exp -> ID ( explist ) .)
    NUMBER_INT      reduce using rule 65 (exp -> ID ( explist ) .)
    END_KW          reduce using rule 65 (exp -> ID ( explist ) .)
    ELSE_KW         reduce using rule 65 (exp -> ID ( explist ) .)
    )               reduce using rule 65 (exp -> ID ( explist ) .)
    THEN_KW         reduce using rule 65 (exp -> ID ( explist ) .)
    ,               reduce using rule 65 (exp -> ID ( explist ) .)
    TO_KW           reduce using rule 65 (exp -> ID ( explist ) .)
    DOWNTO_KW       reduce using rule 65 (exp -> ID ( explist ) .)
    DO_KW           reduce using rule 65 (exp -> ID ( explist ) .)


state 123

    (73) explist -> explist , . exp
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (33) lvalue -> . ID

    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7

    exp                            shift and go to state 154
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    lvalue                         shift and go to state 55

state 124

    (28) block -> BEGIN_KW scopeInitiator stmtlist END_KW .

    ;               reduce using rule 28 (block -> BEGIN_KW scopeInitiator stmtlist END_KW .)
    ELSE_KW         reduce using rule 28 (block -> BEGIN_KW scopeInitiator stmtlist END_KW .)
    END_KW          reduce using rule 28 (block -> BEGIN_KW scopeInitiator stmtlist END_KW .)


state 125

    (32) stmtlist -> stmtlist ; . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    stmt                           shift and go to state 155
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 126

    (36) stmt -> selectionIfInitiator quadder block nexter . quadder
    (37) stmt -> selectionIfInitiator quadder block nexter . ELSE_KW quadder block quadder
    (74) quadder -> . empty
    (76) empty -> .

  ! shift/reduce conflict for ELSE_KW resolved as shift
    ELSE_KW         shift and go to state 157
    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)

  ! ELSE_KW         [ reduce using rule 76 (empty -> .) ]

    quadder                        shift and go to state 156
    empty                          shift and go to state 50

state 127

    (39) stmt -> iterationInitiator quadder block nexter .

    ;               reduce using rule 39 (stmt -> iterationInitiator quadder block nexter .)
    END_KW          reduce using rule 39 (stmt -> iterationInitiator quadder block nexter .)
    ELSE_KW         reduce using rule 39 (stmt -> iterationInitiator quadder block nexter .)


state 128

    (41) stmt -> for_init_up quadder block nexter .

    ;               reduce using rule 41 (stmt -> for_init_up quadder block nexter .)
    END_KW          reduce using rule 41 (stmt -> for_init_up quadder block nexter .)
    ELSE_KW         reduce using rule 41 (stmt -> for_init_up quadder block nexter .)


state 129

    (43) stmt -> for_init_down quadder block nexter .

    ;               reduce using rule 43 (stmt -> for_init_down quadder block nexter .)
    END_KW          reduce using rule 43 (stmt -> for_init_down quadder block nexter .)
    ELSE_KW         reduce using rule 43 (stmt -> for_init_down quadder block nexter .)


state 130

    (46) stmt -> CASE_KW exp nexter caseelement . END_KW quadder
    (48) caseelement -> caseelement . NUMBER_INT : quadder block ; nexter

    END_KW          shift and go to state 158
    NUMBER_INT      shift and go to state 159


state 131

    (47) caseelement -> NUMBER_INT . : quadder block ; nexter

    :               shift and go to state 160


state 132

    (55) exp -> exp + quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    +               reduce using rule 55 (exp -> exp + quadder exp .)
    -               reduce using rule 55 (exp -> exp + quadder exp .)
    GT              reduce using rule 55 (exp -> exp + quadder exp .)
    GE              reduce using rule 55 (exp -> exp + quadder exp .)
    NE              reduce using rule 55 (exp -> exp + quadder exp .)
    EQ              reduce using rule 55 (exp -> exp + quadder exp .)
    LT              reduce using rule 55 (exp -> exp + quadder exp .)
    LE              reduce using rule 55 (exp -> exp + quadder exp .)
    AND_THEN_KW     reduce using rule 55 (exp -> exp + quadder exp .)
    OR_ELSE_KW      reduce using rule 55 (exp -> exp + quadder exp .)
    ;               reduce using rule 55 (exp -> exp + quadder exp .)
    NUMBER_INT      reduce using rule 55 (exp -> exp + quadder exp .)
    END_KW          reduce using rule 55 (exp -> exp + quadder exp .)
    ELSE_KW         reduce using rule 55 (exp -> exp + quadder exp .)
    )               reduce using rule 55 (exp -> exp + quadder exp .)
    THEN_KW         reduce using rule 55 (exp -> exp + quadder exp .)
    ,               reduce using rule 55 (exp -> exp + quadder exp .)
    TO_KW           reduce using rule 55 (exp -> exp + quadder exp .)
    DOWNTO_KW       reduce using rule 55 (exp -> exp + quadder exp .)
    DO_KW           reduce using rule 55 (exp -> exp + quadder exp .)
    *               shift and go to state 58
    /               shift and go to state 59

  ! *               [ reduce using rule 55 (exp -> exp + quadder exp .) ]
  ! /               [ reduce using rule 55 (exp -> exp + quadder exp .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 133

    (56) exp -> exp - quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    +               reduce using rule 56 (exp -> exp - quadder exp .)
    -               reduce using rule 56 (exp -> exp - quadder exp .)
    GT              reduce using rule 56 (exp -> exp - quadder exp .)
    GE              reduce using rule 56 (exp -> exp - quadder exp .)
    NE              reduce using rule 56 (exp -> exp - quadder exp .)
    EQ              reduce using rule 56 (exp -> exp - quadder exp .)
    LT              reduce using rule 56 (exp -> exp - quadder exp .)
    LE              reduce using rule 56 (exp -> exp - quadder exp .)
    AND_THEN_KW     reduce using rule 56 (exp -> exp - quadder exp .)
    OR_ELSE_KW      reduce using rule 56 (exp -> exp - quadder exp .)
    ;               reduce using rule 56 (exp -> exp - quadder exp .)
    NUMBER_INT      reduce using rule 56 (exp -> exp - quadder exp .)
    END_KW          reduce using rule 56 (exp -> exp - quadder exp .)
    ELSE_KW         reduce using rule 56 (exp -> exp - quadder exp .)
    )               reduce using rule 56 (exp -> exp - quadder exp .)
    THEN_KW         reduce using rule 56 (exp -> exp - quadder exp .)
    ,               reduce using rule 56 (exp -> exp - quadder exp .)
    TO_KW           reduce using rule 56 (exp -> exp - quadder exp .)
    DOWNTO_KW       reduce using rule 56 (exp -> exp - quadder exp .)
    DO_KW           reduce using rule 56 (exp -> exp - quadder exp .)
    *               shift and go to state 58
    /               shift and go to state 59

  ! *               [ reduce using rule 56 (exp -> exp - quadder exp .) ]
  ! /               [ reduce using rule 56 (exp -> exp - quadder exp .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 134

    (57) exp -> exp * quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    +               reduce using rule 57 (exp -> exp * quadder exp .)
    -               reduce using rule 57 (exp -> exp * quadder exp .)
    *               reduce using rule 57 (exp -> exp * quadder exp .)
    /               reduce using rule 57 (exp -> exp * quadder exp .)
    GT              reduce using rule 57 (exp -> exp * quadder exp .)
    GE              reduce using rule 57 (exp -> exp * quadder exp .)
    NE              reduce using rule 57 (exp -> exp * quadder exp .)
    EQ              reduce using rule 57 (exp -> exp * quadder exp .)
    LT              reduce using rule 57 (exp -> exp * quadder exp .)
    LE              reduce using rule 57 (exp -> exp * quadder exp .)
    AND_THEN_KW     reduce using rule 57 (exp -> exp * quadder exp .)
    OR_ELSE_KW      reduce using rule 57 (exp -> exp * quadder exp .)
    ;               reduce using rule 57 (exp -> exp * quadder exp .)
    NUMBER_INT      reduce using rule 57 (exp -> exp * quadder exp .)
    END_KW          reduce using rule 57 (exp -> exp * quadder exp .)
    ELSE_KW         reduce using rule 57 (exp -> exp * quadder exp .)
    )               reduce using rule 57 (exp -> exp * quadder exp .)
    THEN_KW         reduce using rule 57 (exp -> exp * quadder exp .)
    ,               reduce using rule 57 (exp -> exp * quadder exp .)
    TO_KW           reduce using rule 57 (exp -> exp * quadder exp .)
    DOWNTO_KW       reduce using rule 57 (exp -> exp * quadder exp .)
    DO_KW           reduce using rule 57 (exp -> exp * quadder exp .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 135

    (58) exp -> exp / quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    +               reduce using rule 58 (exp -> exp / quadder exp .)
    -               reduce using rule 58 (exp -> exp / quadder exp .)
    *               reduce using rule 58 (exp -> exp / quadder exp .)
    /               reduce using rule 58 (exp -> exp / quadder exp .)
    GT              reduce using rule 58 (exp -> exp / quadder exp .)
    GE              reduce using rule 58 (exp -> exp / quadder exp .)
    NE              reduce using rule 58 (exp -> exp / quadder exp .)
    EQ              reduce using rule 58 (exp -> exp / quadder exp .)
    LT              reduce using rule 58 (exp -> exp / quadder exp .)
    LE              reduce using rule 58 (exp -> exp / quadder exp .)
    AND_THEN_KW     reduce using rule 58 (exp -> exp / quadder exp .)
    OR_ELSE_KW      reduce using rule 58 (exp -> exp / quadder exp .)
    ;               reduce using rule 58 (exp -> exp / quadder exp .)
    NUMBER_INT      reduce using rule 58 (exp -> exp / quadder exp .)
    END_KW          reduce using rule 58 (exp -> exp / quadder exp .)
    ELSE_KW         reduce using rule 58 (exp -> exp / quadder exp .)
    )               reduce using rule 58 (exp -> exp / quadder exp .)
    THEN_KW         reduce using rule 58 (exp -> exp / quadder exp .)
    ,               reduce using rule 58 (exp -> exp / quadder exp .)
    TO_KW           reduce using rule 58 (exp -> exp / quadder exp .)
    DOWNTO_KW       reduce using rule 58 (exp -> exp / quadder exp .)
    DO_KW           reduce using rule 58 (exp -> exp / quadder exp .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 136

    (66) exp -> exp GT quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    GT              reduce using rule 66 (exp -> exp GT quadder exp .)
    GE              reduce using rule 66 (exp -> exp GT quadder exp .)
    NE              reduce using rule 66 (exp -> exp GT quadder exp .)
    EQ              reduce using rule 66 (exp -> exp GT quadder exp .)
    LT              reduce using rule 66 (exp -> exp GT quadder exp .)
    LE              reduce using rule 66 (exp -> exp GT quadder exp .)
    AND_THEN_KW     reduce using rule 66 (exp -> exp GT quadder exp .)
    OR_ELSE_KW      reduce using rule 66 (exp -> exp GT quadder exp .)
    ;               reduce using rule 66 (exp -> exp GT quadder exp .)
    NUMBER_INT      reduce using rule 66 (exp -> exp GT quadder exp .)
    END_KW          reduce using rule 66 (exp -> exp GT quadder exp .)
    ELSE_KW         reduce using rule 66 (exp -> exp GT quadder exp .)
    )               reduce using rule 66 (exp -> exp GT quadder exp .)
    THEN_KW         reduce using rule 66 (exp -> exp GT quadder exp .)
    ,               reduce using rule 66 (exp -> exp GT quadder exp .)
    TO_KW           reduce using rule 66 (exp -> exp GT quadder exp .)
    DOWNTO_KW       reduce using rule 66 (exp -> exp GT quadder exp .)
    DO_KW           reduce using rule 66 (exp -> exp GT quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59

  ! +               [ reduce using rule 66 (exp -> exp GT quadder exp .) ]
  ! -               [ reduce using rule 66 (exp -> exp GT quadder exp .) ]
  ! *               [ reduce using rule 66 (exp -> exp GT quadder exp .) ]
  ! /               [ reduce using rule 66 (exp -> exp GT quadder exp .) ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 137

    (67) exp -> exp GE quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    GT              reduce using rule 67 (exp -> exp GE quadder exp .)
    GE              reduce using rule 67 (exp -> exp GE quadder exp .)
    NE              reduce using rule 67 (exp -> exp GE quadder exp .)
    EQ              reduce using rule 67 (exp -> exp GE quadder exp .)
    LT              reduce using rule 67 (exp -> exp GE quadder exp .)
    LE              reduce using rule 67 (exp -> exp GE quadder exp .)
    AND_THEN_KW     reduce using rule 67 (exp -> exp GE quadder exp .)
    OR_ELSE_KW      reduce using rule 67 (exp -> exp GE quadder exp .)
    ;               reduce using rule 67 (exp -> exp GE quadder exp .)
    NUMBER_INT      reduce using rule 67 (exp -> exp GE quadder exp .)
    END_KW          reduce using rule 67 (exp -> exp GE quadder exp .)
    ELSE_KW         reduce using rule 67 (exp -> exp GE quadder exp .)
    )               reduce using rule 67 (exp -> exp GE quadder exp .)
    THEN_KW         reduce using rule 67 (exp -> exp GE quadder exp .)
    ,               reduce using rule 67 (exp -> exp GE quadder exp .)
    TO_KW           reduce using rule 67 (exp -> exp GE quadder exp .)
    DOWNTO_KW       reduce using rule 67 (exp -> exp GE quadder exp .)
    DO_KW           reduce using rule 67 (exp -> exp GE quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59

  ! +               [ reduce using rule 67 (exp -> exp GE quadder exp .) ]
  ! -               [ reduce using rule 67 (exp -> exp GE quadder exp .) ]
  ! *               [ reduce using rule 67 (exp -> exp GE quadder exp .) ]
  ! /               [ reduce using rule 67 (exp -> exp GE quadder exp .) ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 138

    (68) exp -> exp NE quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    NE              reduce using rule 68 (exp -> exp NE quadder exp .)
    EQ              reduce using rule 68 (exp -> exp NE quadder exp .)
    AND_THEN_KW     reduce using rule 68 (exp -> exp NE quadder exp .)
    OR_ELSE_KW      reduce using rule 68 (exp -> exp NE quadder exp .)
    ;               reduce using rule 68 (exp -> exp NE quadder exp .)
    NUMBER_INT      reduce using rule 68 (exp -> exp NE quadder exp .)
    END_KW          reduce using rule 68 (exp -> exp NE quadder exp .)
    ELSE_KW         reduce using rule 68 (exp -> exp NE quadder exp .)
    )               reduce using rule 68 (exp -> exp NE quadder exp .)
    THEN_KW         reduce using rule 68 (exp -> exp NE quadder exp .)
    ,               reduce using rule 68 (exp -> exp NE quadder exp .)
    TO_KW           reduce using rule 68 (exp -> exp NE quadder exp .)
    DOWNTO_KW       reduce using rule 68 (exp -> exp NE quadder exp .)
    DO_KW           reduce using rule 68 (exp -> exp NE quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    LT              shift and go to state 64
    LE              shift and go to state 65

  ! +               [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! -               [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! *               [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! /               [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! GT              [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! GE              [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! LT              [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! LE              [ reduce using rule 68 (exp -> exp NE quadder exp .) ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 139

    (69) exp -> exp EQ quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    NE              reduce using rule 69 (exp -> exp EQ quadder exp .)
    EQ              reduce using rule 69 (exp -> exp EQ quadder exp .)
    AND_THEN_KW     reduce using rule 69 (exp -> exp EQ quadder exp .)
    OR_ELSE_KW      reduce using rule 69 (exp -> exp EQ quadder exp .)
    ;               reduce using rule 69 (exp -> exp EQ quadder exp .)
    NUMBER_INT      reduce using rule 69 (exp -> exp EQ quadder exp .)
    END_KW          reduce using rule 69 (exp -> exp EQ quadder exp .)
    ELSE_KW         reduce using rule 69 (exp -> exp EQ quadder exp .)
    )               reduce using rule 69 (exp -> exp EQ quadder exp .)
    THEN_KW         reduce using rule 69 (exp -> exp EQ quadder exp .)
    ,               reduce using rule 69 (exp -> exp EQ quadder exp .)
    TO_KW           reduce using rule 69 (exp -> exp EQ quadder exp .)
    DOWNTO_KW       reduce using rule 69 (exp -> exp EQ quadder exp .)
    DO_KW           reduce using rule 69 (exp -> exp EQ quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    LT              shift and go to state 64
    LE              shift and go to state 65

  ! +               [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! -               [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! *               [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! /               [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! GT              [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! GE              [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! LT              [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! LE              [ reduce using rule 69 (exp -> exp EQ quadder exp .) ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 140

    (70) exp -> exp LT quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    GT              reduce using rule 70 (exp -> exp LT quadder exp .)
    GE              reduce using rule 70 (exp -> exp LT quadder exp .)
    NE              reduce using rule 70 (exp -> exp LT quadder exp .)
    EQ              reduce using rule 70 (exp -> exp LT quadder exp .)
    LT              reduce using rule 70 (exp -> exp LT quadder exp .)
    LE              reduce using rule 70 (exp -> exp LT quadder exp .)
    AND_THEN_KW     reduce using rule 70 (exp -> exp LT quadder exp .)
    OR_ELSE_KW      reduce using rule 70 (exp -> exp LT quadder exp .)
    ;               reduce using rule 70 (exp -> exp LT quadder exp .)
    NUMBER_INT      reduce using rule 70 (exp -> exp LT quadder exp .)
    END_KW          reduce using rule 70 (exp -> exp LT quadder exp .)
    ELSE_KW         reduce using rule 70 (exp -> exp LT quadder exp .)
    )               reduce using rule 70 (exp -> exp LT quadder exp .)
    THEN_KW         reduce using rule 70 (exp -> exp LT quadder exp .)
    ,               reduce using rule 70 (exp -> exp LT quadder exp .)
    TO_KW           reduce using rule 70 (exp -> exp LT quadder exp .)
    DOWNTO_KW       reduce using rule 70 (exp -> exp LT quadder exp .)
    DO_KW           reduce using rule 70 (exp -> exp LT quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59

  ! +               [ reduce using rule 70 (exp -> exp LT quadder exp .) ]
  ! -               [ reduce using rule 70 (exp -> exp LT quadder exp .) ]
  ! *               [ reduce using rule 70 (exp -> exp LT quadder exp .) ]
  ! /               [ reduce using rule 70 (exp -> exp LT quadder exp .) ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 141

    (71) exp -> exp LE quadder exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    GT              reduce using rule 71 (exp -> exp LE quadder exp .)
    GE              reduce using rule 71 (exp -> exp LE quadder exp .)
    NE              reduce using rule 71 (exp -> exp LE quadder exp .)
    EQ              reduce using rule 71 (exp -> exp LE quadder exp .)
    LT              reduce using rule 71 (exp -> exp LE quadder exp .)
    LE              reduce using rule 71 (exp -> exp LE quadder exp .)
    AND_THEN_KW     reduce using rule 71 (exp -> exp LE quadder exp .)
    OR_ELSE_KW      reduce using rule 71 (exp -> exp LE quadder exp .)
    ;               reduce using rule 71 (exp -> exp LE quadder exp .)
    NUMBER_INT      reduce using rule 71 (exp -> exp LE quadder exp .)
    END_KW          reduce using rule 71 (exp -> exp LE quadder exp .)
    ELSE_KW         reduce using rule 71 (exp -> exp LE quadder exp .)
    )               reduce using rule 71 (exp -> exp LE quadder exp .)
    THEN_KW         reduce using rule 71 (exp -> exp LE quadder exp .)
    ,               reduce using rule 71 (exp -> exp LE quadder exp .)
    TO_KW           reduce using rule 71 (exp -> exp LE quadder exp .)
    DOWNTO_KW       reduce using rule 71 (exp -> exp LE quadder exp .)
    DO_KW           reduce using rule 71 (exp -> exp LE quadder exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59

  ! +               [ reduce using rule 71 (exp -> exp LE quadder exp .) ]
  ! -               [ reduce using rule 71 (exp -> exp LE quadder exp .) ]
  ! *               [ reduce using rule 71 (exp -> exp LE quadder exp .) ]
  ! /               [ reduce using rule 71 (exp -> exp LE quadder exp .) ]
  ! GT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND_THEN_KW     [ shift and go to state 66 ]
  ! OR_ELSE_KW      [ shift and go to state 67 ]


state 142

    (15) idlist -> idlist , iddec .

    ;               reduce using rule 15 (idlist -> idlist , iddec .)
    ,               reduce using rule 15 (idlist -> idlist , iddec .)


state 143

    (13) iddec -> ID ASSIGNMENT exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    ;               reduce using rule 13 (iddec -> ID ASSIGNMENT exp .)
    ,               reduce using rule 13 (iddec -> ID ASSIGNMENT exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 144

    (17) procdec -> PROCEDURE_KW ID ( paramdecs_final . ) block ;
    (18) procdec -> PROCEDURE_KW ID ( paramdecs_final . ) declist block ;

    )               shift and go to state 161


state 145

    (22) paramdecs_final -> paramdecs .
    (24) paramdecs -> paramdecs . ; paramdec

    )               reduce using rule 22 (paramdecs_final -> paramdecs .)
    ;               shift and go to state 162


state 146

    (23) paramdecs -> paramdec .

    ;               reduce using rule 23 (paramdecs -> paramdec .)
    )               reduce using rule 23 (paramdecs -> paramdec .)


state 147

    (25) paramdec -> type . paramlist
    (26) paramlist -> . ID
    (27) paramlist -> . paramlist , ID

    ID              shift and go to state 164

    paramlist                      shift and go to state 163

state 148

    (19) funcdec -> funInitiator scopeInitiator block ; .

    BEGIN_KW        reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    CASE_KW         reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    RETURN_KW       reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    PROCEDURE_KW    reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    IF_KW           reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    WHILE_KW        reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    (               reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    NUMBER_INT      reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    NUMBER_REAL     reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    TRUE_KW         reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    FALSE_KW        reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    ID              reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    INT_KW          reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    REAL_KW         reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    BOOL_KW         reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    FUNCTION_KW     reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)
    FOR_KW          reduce using rule 19 (funcdec -> funInitiator scopeInitiator block ; .)


state 149

    (20) funcdec -> funInitiator scopeInitiator declist block . ;

    ;               shift and go to state 165


state 150

    (40) iterationInitiator -> WHILE_KW quadder exp DO_KW .

    BEGIN_KW        reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    CASE_KW         reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    RETURN_KW       reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    IF_KW           reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    WHILE_KW        reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    (               reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    NUMBER_INT      reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    NUMBER_REAL     reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    TRUE_KW         reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    FALSE_KW        reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    ID              reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)
    FOR_KW          reduce using rule 40 (iterationInitiator -> WHILE_KW quadder exp DO_KW .)


state 151

    (42) for_init_up -> forInitiator TO_KW quadder exp . DO_KW
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    DO_KW           shift and go to state 166
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 152

    (44) for_init_down -> forInitiator DOWNTO_KW quadder exp . DO_KW
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    DO_KW           shift and go to state 167
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 153

    (21) funInitiator -> FUNCTION_KW ID ( quadder . nexter paramdecs_final ) : type
    (75) nexter -> . empty
    (76) empty -> .

    INT_KW          reduce using rule 76 (empty -> .)
    REAL_KW         reduce using rule 76 (empty -> .)
    BOOL_KW         reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 168
    empty                          shift and go to state 96

state 154

    (73) explist -> explist , exp .
    (55) exp -> exp . + quadder exp
    (56) exp -> exp . - quadder exp
    (57) exp -> exp . * quadder exp
    (58) exp -> exp . / quadder exp
    (66) exp -> exp . GT quadder exp
    (67) exp -> exp . GE quadder exp
    (68) exp -> exp . NE quadder exp
    (69) exp -> exp . EQ quadder exp
    (70) exp -> exp . LT quadder exp
    (71) exp -> exp . LE quadder exp
    (51) andInitiator -> exp . AND_THEN_KW
    (53) orInitiator -> exp . OR_ELSE_KW

    )               reduce using rule 73 (explist -> explist , exp .)
    ,               reduce using rule 73 (explist -> explist , exp .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    GT              shift and go to state 60
    GE              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LT              shift and go to state 64
    LE              shift and go to state 65
    AND_THEN_KW     shift and go to state 66
    OR_ELSE_KW      shift and go to state 67


state 155

    (32) stmtlist -> stmtlist ; stmt .

    END_KW          reduce using rule 32 (stmtlist -> stmtlist ; stmt .)
    ;               reduce using rule 32 (stmtlist -> stmtlist ; stmt .)


state 156

    (36) stmt -> selectionIfInitiator quadder block nexter quadder .

    ;               reduce using rule 36 (stmt -> selectionIfInitiator quadder block nexter quadder .)
    END_KW          reduce using rule 36 (stmt -> selectionIfInitiator quadder block nexter quadder .)
    ELSE_KW         reduce using rule 36 (stmt -> selectionIfInitiator quadder block nexter quadder .)


state 157

    (37) stmt -> selectionIfInitiator quadder block nexter ELSE_KW . quadder block quadder
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 169
    empty                          shift and go to state 50

state 158

    (46) stmt -> CASE_KW exp nexter caseelement END_KW . quadder
    (74) quadder -> . empty
    (76) empty -> .

    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)
    ELSE_KW         reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 170
    empty                          shift and go to state 50

state 159

    (48) caseelement -> caseelement NUMBER_INT . : quadder block ; nexter

    :               shift and go to state 171


state 160

    (47) caseelement -> NUMBER_INT : . quadder block ; nexter
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 172
    empty                          shift and go to state 50

state 161

    (17) procdec -> PROCEDURE_KW ID ( paramdecs_final ) . block ;
    (18) procdec -> PROCEDURE_KW ID ( paramdecs_final ) . declist block ;
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (4) declist -> . dec
    (5) declist -> . declist dec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    PROCEDURE_KW    shift and go to state 25
    FOR_KW          shift and go to state 42
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41

    block                          shift and go to state 173
    declist                        shift and go to state 174
    stmt                           shift and go to state 12
    dec                            shift and go to state 10
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33
    type                           shift and go to state 24
    funInitiator                   shift and go to state 27

state 162

    (24) paramdecs -> paramdecs ; . paramdec
    (25) paramdec -> . type paramlist
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW

    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40

    paramdec                       shift and go to state 175
    type                           shift and go to state 147

state 163

    (25) paramdec -> type paramlist .
    (27) paramlist -> paramlist . , ID

    ;               reduce using rule 25 (paramdec -> type paramlist .)
    )               reduce using rule 25 (paramdec -> type paramlist .)
    ,               shift and go to state 176


state 164

    (26) paramlist -> ID .

    ,               reduce using rule 26 (paramlist -> ID .)
    ;               reduce using rule 26 (paramlist -> ID .)
    )               reduce using rule 26 (paramlist -> ID .)


state 165

    (20) funcdec -> funInitiator scopeInitiator declist block ; .

    BEGIN_KW        reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    CASE_KW         reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    RETURN_KW       reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    PROCEDURE_KW    reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    IF_KW           reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    WHILE_KW        reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    (               reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    NUMBER_INT      reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    NUMBER_REAL     reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    TRUE_KW         reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    FALSE_KW        reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    ID              reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    INT_KW          reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    REAL_KW         reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    BOOL_KW         reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    FUNCTION_KW     reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)
    FOR_KW          reduce using rule 20 (funcdec -> funInitiator scopeInitiator declist block ; .)


state 166

    (42) for_init_up -> forInitiator TO_KW quadder exp DO_KW .

    BEGIN_KW        reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    CASE_KW         reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    RETURN_KW       reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    IF_KW           reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    WHILE_KW        reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    (               reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    NUMBER_INT      reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    NUMBER_REAL     reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    TRUE_KW         reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    FALSE_KW        reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    ID              reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)
    FOR_KW          reduce using rule 42 (for_init_up -> forInitiator TO_KW quadder exp DO_KW .)


state 167

    (44) for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .

    BEGIN_KW        reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    CASE_KW         reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    RETURN_KW       reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    IF_KW           reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    WHILE_KW        reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    (               reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    NUMBER_INT      reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    NUMBER_REAL     reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    TRUE_KW         reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    FALSE_KW        reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    ID              reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)
    FOR_KW          reduce using rule 44 (for_init_down -> forInitiator DOWNTO_KW quadder exp DO_KW .)


state 168

    (21) funInitiator -> FUNCTION_KW ID ( quadder nexter . paramdecs_final ) : type
    (22) paramdecs_final -> . paramdecs
    (23) paramdecs -> . paramdec
    (24) paramdecs -> . paramdecs ; paramdec
    (25) paramdec -> . type paramlist
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW

    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40

    paramdecs_final                shift and go to state 177
    type                           shift and go to state 147
    paramdecs                      shift and go to state 145
    paramdec                       shift and go to state 146

state 169

    (37) stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder . block quadder
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    selectionIfInitiator           shift and go to state 17
    block                          shift and go to state 178
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 170

    (46) stmt -> CASE_KW exp nexter caseelement END_KW quadder .

    ;               reduce using rule 46 (stmt -> CASE_KW exp nexter caseelement END_KW quadder .)
    END_KW          reduce using rule 46 (stmt -> CASE_KW exp nexter caseelement END_KW quadder .)
    ELSE_KW         reduce using rule 46 (stmt -> CASE_KW exp nexter caseelement END_KW quadder .)


state 171

    (48) caseelement -> caseelement NUMBER_INT : . quadder block ; nexter
    (74) quadder -> . empty
    (76) empty -> .

    BEGIN_KW        reduce using rule 76 (empty -> .)
    CASE_KW         reduce using rule 76 (empty -> .)
    RETURN_KW       reduce using rule 76 (empty -> .)
    IF_KW           reduce using rule 76 (empty -> .)
    WHILE_KW        reduce using rule 76 (empty -> .)
    (               reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)
    NUMBER_REAL     reduce using rule 76 (empty -> .)
    TRUE_KW         reduce using rule 76 (empty -> .)
    FALSE_KW        reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    FOR_KW          reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 179
    empty                          shift and go to state 50

state 172

    (47) caseelement -> NUMBER_INT : quadder . block ; nexter
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    block                          shift and go to state 180
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 173

    (17) procdec -> PROCEDURE_KW ID ( paramdecs_final ) block . ;

    ;               shift and go to state 181


state 174

    (18) procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist . block ;
    (5) declist -> declist . dec
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (16) vardec -> . type idlist ;
    (17) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) block ;
    (18) procdec -> . PROCEDURE_KW ID ( paramdecs_final ) declist block ;
    (19) funcdec -> . funInitiator scopeInitiator block ;
    (20) funcdec -> . funInitiator scopeInitiator declist block ;
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW
    (21) funInitiator -> . FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    PROCEDURE_KW    shift and go to state 25
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40
    FUNCTION_KW     shift and go to state 41
    FOR_KW          shift and go to state 42

    block                          shift and go to state 182
    dec                            shift and go to state 45
    stmt                           shift and go to state 12
    vardec                         shift and go to state 13
    procdec                        shift and go to state 14
    funcdec                        shift and go to state 15
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    type                           shift and go to state 24
    funInitiator                   shift and go to state 27
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 175

    (24) paramdecs -> paramdecs ; paramdec .

    ;               reduce using rule 24 (paramdecs -> paramdecs ; paramdec .)
    )               reduce using rule 24 (paramdecs -> paramdecs ; paramdec .)


state 176

    (27) paramlist -> paramlist , . ID

    ID              shift and go to state 183


state 177

    (21) funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final . ) : type

    )               shift and go to state 184


state 178

    (37) stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block . quadder
    (74) quadder -> . empty
    (76) empty -> .

    ;               reduce using rule 76 (empty -> .)
    END_KW          reduce using rule 76 (empty -> .)
    ELSE_KW         reduce using rule 76 (empty -> .)

    quadder                        shift and go to state 185
    empty                          shift and go to state 50

state 179

    (48) caseelement -> caseelement NUMBER_INT : quadder . block ; nexter
    (28) block -> . BEGIN_KW scopeInitiator stmtlist END_KW
    (30) block -> . stmt
    (35) stmt -> . assignment_stmt
    (36) stmt -> . selectionIfInitiator quadder block nexter quadder
    (37) stmt -> . selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder
    (39) stmt -> . iterationInitiator quadder block nexter
    (41) stmt -> . for_init_up quadder block nexter
    (43) stmt -> . for_init_down quadder block nexter
    (46) stmt -> . CASE_KW exp nexter caseelement END_KW quadder
    (49) stmt -> . RETURN_KW exp
    (50) stmt -> . exp
    (34) assignment_stmt -> . lvalue ASSIGNMENT exp
    (38) selectionIfInitiator -> . IF_KW exp THEN_KW
    (40) iterationInitiator -> . WHILE_KW quadder exp DO_KW
    (42) for_init_up -> . forInitiator TO_KW quadder exp DO_KW
    (44) for_init_down -> . forInitiator DOWNTO_KW quadder exp DO_KW
    (52) exp -> . andInitiator quadder exp
    (54) exp -> . orInitiator quadder exp
    (55) exp -> . exp + quadder exp
    (56) exp -> . exp - quadder exp
    (57) exp -> . exp * quadder exp
    (58) exp -> . exp / quadder exp
    (59) exp -> . ( exp )
    (60) exp -> . NUMBER_INT
    (61) exp -> . NUMBER_REAL
    (62) exp -> . TRUE_KW
    (63) exp -> . FALSE_KW
    (64) exp -> . lvalue
    (65) exp -> . ID ( explist )
    (66) exp -> . exp GT quadder exp
    (67) exp -> . exp GE quadder exp
    (68) exp -> . exp NE quadder exp
    (69) exp -> . exp EQ quadder exp
    (70) exp -> . exp LT quadder exp
    (71) exp -> . exp LE quadder exp
    (33) lvalue -> . ID
    (45) forInitiator -> . FOR_KW assignment_stmt
    (51) andInitiator -> . exp AND_THEN_KW
    (53) orInitiator -> . exp OR_ELSE_KW

    BEGIN_KW        shift and go to state 11
    CASE_KW         shift and go to state 21
    RETURN_KW       shift and go to state 23
    IF_KW           shift and go to state 29
    WHILE_KW        shift and go to state 30
    (               shift and go to state 26
    NUMBER_INT      shift and go to state 34
    NUMBER_REAL     shift and go to state 35
    TRUE_KW         shift and go to state 36
    FALSE_KW        shift and go to state 37
    ID              shift and go to state 7
    FOR_KW          shift and go to state 42

    block                          shift and go to state 186
    stmt                           shift and go to state 12
    assignment_stmt                shift and go to state 16
    selectionIfInitiator           shift and go to state 17
    iterationInitiator             shift and go to state 18
    for_init_up                    shift and go to state 19
    for_init_down                  shift and go to state 20
    exp                            shift and go to state 22
    lvalue                         shift and go to state 28
    forInitiator                   shift and go to state 31
    andInitiator                   shift and go to state 32
    orInitiator                    shift and go to state 33

state 180

    (47) caseelement -> NUMBER_INT : quadder block . ; nexter

    ;               shift and go to state 187


state 181

    (17) procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .

    BEGIN_KW        reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    CASE_KW         reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    RETURN_KW       reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    PROCEDURE_KW    reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    IF_KW           reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    WHILE_KW        reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    (               reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    NUMBER_INT      reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    NUMBER_REAL     reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    TRUE_KW         reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    FALSE_KW        reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    ID              reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    INT_KW          reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    REAL_KW         reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    BOOL_KW         reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    FUNCTION_KW     reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)
    FOR_KW          reduce using rule 17 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) block ; .)


state 182

    (18) procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block . ;

    ;               shift and go to state 188


state 183

    (27) paramlist -> paramlist , ID .

    ,               reduce using rule 27 (paramlist -> paramlist , ID .)
    ;               reduce using rule 27 (paramlist -> paramlist , ID .)
    )               reduce using rule 27 (paramlist -> paramlist , ID .)


state 184

    (21) funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) . : type

    :               shift and go to state 189


state 185

    (37) stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder .

    ;               reduce using rule 37 (stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder .)
    END_KW          reduce using rule 37 (stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder .)
    ELSE_KW         reduce using rule 37 (stmt -> selectionIfInitiator quadder block nexter ELSE_KW quadder block quadder .)


state 186

    (48) caseelement -> caseelement NUMBER_INT : quadder block . ; nexter

    ;               shift and go to state 190


state 187

    (47) caseelement -> NUMBER_INT : quadder block ; . nexter
    (75) nexter -> . empty
    (76) empty -> .

    END_KW          reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 191
    empty                          shift and go to state 96

state 188

    (18) procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .

    BEGIN_KW        reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    CASE_KW         reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    RETURN_KW       reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    PROCEDURE_KW    reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    IF_KW           reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    WHILE_KW        reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    (               reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    NUMBER_INT      reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    NUMBER_REAL     reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    TRUE_KW         reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    FALSE_KW        reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    ID              reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    INT_KW          reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    REAL_KW         reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    BOOL_KW         reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    FUNCTION_KW     reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)
    FOR_KW          reduce using rule 18 (procdec -> PROCEDURE_KW ID ( paramdecs_final ) declist block ; .)


state 189

    (21) funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : . type
    (9) type -> . INT_KW
    (10) type -> . REAL_KW
    (11) type -> . BOOL_KW

    INT_KW          shift and go to state 38
    REAL_KW         shift and go to state 39
    BOOL_KW         shift and go to state 40

    type                           shift and go to state 192

state 190

    (48) caseelement -> caseelement NUMBER_INT : quadder block ; . nexter
    (75) nexter -> . empty
    (76) empty -> .

    END_KW          reduce using rule 76 (empty -> .)
    NUMBER_INT      reduce using rule 76 (empty -> .)

    nexter                         shift and go to state 193
    empty                          shift and go to state 96

state 191

    (47) caseelement -> NUMBER_INT : quadder block ; nexter .

    END_KW          reduce using rule 47 (caseelement -> NUMBER_INT : quadder block ; nexter .)
    NUMBER_INT      reduce using rule 47 (caseelement -> NUMBER_INT : quadder block ; nexter .)


state 192

    (21) funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .

    BEGIN_KW        reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    CASE_KW         reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    RETURN_KW       reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    IF_KW           reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    WHILE_KW        reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    (               reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    NUMBER_INT      reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    NUMBER_REAL     reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    TRUE_KW         reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    FALSE_KW        reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    ID              reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    PROCEDURE_KW    reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    FOR_KW          reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    INT_KW          reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    REAL_KW         reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    BOOL_KW         reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)
    FUNCTION_KW     reduce using rule 21 (funInitiator -> FUNCTION_KW ID ( quadder nexter paramdecs_final ) : type .)


state 193

    (48) caseelement -> caseelement NUMBER_INT : quadder block ; nexter .

    END_KW          reduce using rule 48 (caseelement -> caseelement NUMBER_INT : quadder block ; nexter .)
    NUMBER_INT      reduce using rule 48 (caseelement -> caseelement NUMBER_INT : quadder block ; nexter .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 119 resolved as shift
WARNING: shift/reduce conflict for - in state 119 resolved as shift
WARNING: shift/reduce conflict for * in state 119 resolved as shift
WARNING: shift/reduce conflict for / in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for NE in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for AND_THEN_KW in state 119 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE_KW in state 119 resolved as shift
WARNING: shift/reduce conflict for + in state 120 resolved as shift
WARNING: shift/reduce conflict for - in state 120 resolved as shift
WARNING: shift/reduce conflict for * in state 120 resolved as shift
WARNING: shift/reduce conflict for / in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for NE in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for AND_THEN_KW in state 120 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE_KW in state 120 resolved as shift
WARNING: shift/reduce conflict for ELSE_KW in state 126 resolved as shift
